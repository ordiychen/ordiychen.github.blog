<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL show status 使用指南</title>
    <url>/posts/2017-03-28-mysql-show-table-status/</url>
    <content><![CDATA[<h3 id="mysql-show-status"><a href="#mysql-show-status" class="headerlink" title="mysql show status"></a>mysql show status</h3><p><code>SHOW TABLE STATUS</code> 可以查看表/view的大量信息。 这里简述一下用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询数据表 状态</span><br><span class="line">SHOW TABLE STATUS from dp_report_forms_data like &#39;tb_dp_hera_user_access_statistics&#39; \G</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Name            | tb_dp_hera_user_access_statistics</span><br><span class="line">Engine          | InnoDB</span><br><span class="line">Version         | 10</span><br><span class="line">Row_format      | Dynamic</span><br><span class="line">Rows            | 9661</span><br><span class="line">Avg_row_length  | 164</span><br><span class="line">Data_length     | 1589248</span><br><span class="line">Max_data_length | 0</span><br><span class="line">Index_length    | 1589248</span><br><span class="line">Data_free       | 2097152</span><br><span class="line">Auto_increment  | 240145</span><br><span class="line">Create_time     | 2020-08-06 10:53:18</span><br><span class="line">Update_time     | &lt;null&gt;</span><br><span class="line">Check_time      | &lt;null&gt;</span><br><span class="line">Collation       | utf8_general_ci</span><br><span class="line">Checksum        | &lt;null&gt;</span><br><span class="line">Create_options  |</span><br><span class="line">Comment         | 用户访问统计表(总表)，按天统计</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Name<br>表名称</p>
</li>
<li><p>Engine<br>存储引擎-storage engine</p>
</li>
<li><p>Version<br>表的.frm文件的版本号。 </p>
</li>
<li><p>Row_format<br> 行的存储格式(Fixed, Dynamic, Compressed, Redundant, Compact)).<br> 对于MyISAM表，Dynamic对应于myisamchk -dvv报告为打包的内容。 使用Antelope文件格式时，InnoDB表格式为Redundant或Compact，而使用Barracuda文件格式时，InnoDB表格式为Compressed或Dynamic。</p>
</li>
<li><p>Rows<br> 行数。 某些存储引擎（例如MyISAM）存储准确的计数。 对于其他存储引擎，例如InnoDB，此值是一个近似值，可能与实际值相差40％至50％。 在这种情况下，请使用SELECT COUNT（*）获得准确的计数。</p>
</li>
<li><p>Avg_row_length<br> 平均行长</p>
</li>
<li><p>Data_length<br>对于MyISAM，Data_length是数据文件的长度，以字节为单位。<br>对于InnoDB，Data_length是为聚簇索引分配的大约空间量（以字节为单位）。 具体来说，它是聚簇索引大小（以页为单位）乘以InnoDB页大小。</p>
</li>
<li><p>Max_data_length<br>对于MyISAM，Max_data_length是数据文件的最大长度。 给定使用的数据指针大小，这是表中可以存储的数据字节总数<br>不用于InnoDB</p>
</li>
<li><p>Index_length<br>对于MyISAM，Index_length是索引文件的长度，以字节为单位。<br>对于InnoDB，Index_length是分配给非聚集索引的大约空间量（以字节为单位）。 具体来说，它是非聚集索引大小（以页为单位）的总和乘以InnoDB页面大小。</p>
</li>
<li><p>Data_free<br>已分配但未使用的字节数。<br>InnoDB表报告表所属的表空间的可用空间。 对于位于共享表空间中的表，这是共享表空间的可用空间。 如果您使用多个表空间，并且表具有自己的表空间，则可用空间仅用于该表。 可用空间是指完全可用范围中的字节数减去安全裕量。 即使可用空间显示为0，只要不需要分配新的扩展盘区，也可以插入行。<br>对于NDB群集，Data_free显示磁盘上为磁盘数据表或磁盘上的碎片分配但未使用的空间。 （内存中的数据资源使用情况由Data_length列报告。）<br>对于分区表，此值仅是估计值，可能不是绝对正确。 在这种情况下，获取此信息的一种更准确的方法是查询INFORMATION_SCHEMA PARTITIONS表，如本示例所示：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(DATA_FREE)</span><br><span class="line"> <span class="keyword">FROM</span>  INFORMATION_SCHEMA.PARTITIONS</span><br><span class="line"> <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;mydb&#x27;</span></span><br><span class="line"> <span class="keyword">AND</span>   TABLE_NAME   <span class="operator">=</span> <span class="string">&#x27;mytable&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Auto_increment<br>下一个AUTO_INCREMENT 值</p>
</li>
<li><p>Create_time<br>表的创建时间</p>
</li>
<li><p>Update_time<br>数据文件的最后更新时间。 对于某些存储引擎，此值为NULL。 例如，InnoDB在其系统表空间中存储多个表，并且数据文件时间戳不适用。 即使在每个InnoDB表都位于单独的.ibd文件中的每表文件模式下，更改缓冲也会延迟对数据文件的写入，因此文件修改时间与上一次插入，更新或删除的时间不同。 对于MyISAM，使用数据文件时间戳。 但是，在Windows上，时间戳不会通过更新进行更新，因此该值不准确。<br>Update_time显示对未分区的InnoDB表执行的最后一次UPDATE，INSERT或DELETE的时间戳记值。 对于MVCC，时间戳记值反映了COMMIT时间，该时间被视为最后更新时间。 重新启动服务器或从InnoDB数据字典高速缓存中清除表时，时间戳记不会保留。<br>Update_time列还显示分区的InnoDB表的此信息。</p>
</li>
<li><p>Check_time<br>上次检查表的时间。 并非所有存储引擎这次都更新，在这种情况下，该值始终为NULL。对于分区的InnoDB表，Check_time始终为NULL。<br>对于分区的InnoDB表，Check_time始终为NULL。</p>
</li>
<li><p>TABLE_COLLATION<br>该表的默认排序规则。 输出没有显式列出表的默认字符集，但是排序规则名称以字符集名称开头。</p>
</li>
</ul>
<ul>
<li><p>Create_options<br>与CREATE TABLE一起使用的其他选项,查阅(partition_options)[<a href="https://dev.mysql.com/doc/refman/5.7/en/create-table.html#create-table-partitioning]">https://dev.mysql.com/doc/refman/5.7/en/create-table.html#create-table-partitioning]</a><br>Create_options显示已分区表的分区。<br>Create_options显示在创建或更改每表文件表空间时指定的ENCRYPTION选项。<br>创建禁用了严格模式的表时，如果不支持指定的行格式，则使用存储引擎的默认行格式。 该表的实际行格式在Row_format列中报告。 Create_options显示在CREATE TABLE语句中指定的行格式。<br>更改表的存储引擎时，不适用于新存储引擎的表选项将保留在表定义中，以便在必要时将具有其先前定义的选项的表恢复到原始存储引擎。 Create_options可能显示保留的选项。</p>
</li>
<li><p>TABLE_COMMENT<br>表的备注说明信息</p>
</li>
</ul>
<h2 id="INFORMATION-SCHEMA"><a href="#INFORMATION-SCHEMA" class="headerlink" title="INFORMATION_SCHEMA"></a>INFORMATION_SCHEMA</h2><p>INFORMATION_SCHEMA 与show tables的信息有一些相同，重点是表示<code>information about tables in databases</code>. 用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select * from INFORMATION_SCHEMA.TABLES WHERE table_schema &#x3D; &#39;db_name&#39; AND table_name LIKE &#39;tb_dp_hera_user_access_statistics&#39; \G</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TABLE_CATALOG   | def</span><br><span class="line">TABLE_SCHEMA    | dp_report_forms_data</span><br><span class="line">TABLE_NAME      | tb_dp_hera_user_access_statistics</span><br><span class="line">TABLE_TYPE      | BASE TABLE</span><br><span class="line">ENGINE          | InnoDB</span><br><span class="line">VERSION         | 10</span><br><span class="line">ROW_FORMAT      | Dynamic</span><br><span class="line">TABLE_ROWS      | 9661</span><br><span class="line">AVG_ROW_LENGTH  | 164</span><br><span class="line">DATA_LENGTH     | 1589248</span><br><span class="line">MAX_DATA_LENGTH | 0</span><br><span class="line">INDEX_LENGTH    | 1589248</span><br><span class="line">DATA_FREE       | 2097152</span><br><span class="line">AUTO_INCREMENT  | 240145</span><br><span class="line">CREATE_TIME     | 2020-08-06 10:53:18</span><br><span class="line">UPDATE_TIME     | &lt;null&gt;</span><br><span class="line">CHECK_TIME      | &lt;null&gt;</span><br><span class="line">TABLE_COLLATION | utf8_general_ci</span><br><span class="line">CHECKSUM        | &lt;null&gt;</span><br><span class="line">CREATE_OPTIONS  |</span><br><span class="line">TABLE_COMMENT   | 用户访问统计表(总表)，按天统计</span><br></pre></td></tr></table></figure>
<ul>
<li>TABLE_TYPE<br>表格的BASE TABLE，视图的VIEW或INFORMATION_SCHEMA表的SYSTEM VIEW。 </li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[mysql show table statsu](<a href="https://dev.mysql.com/doc/refman/5.7/en/show-table-status.html%EF%BC%89">https://dev.mysql.com/doc/refman/5.7/en/show-table-status.html）</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Java</tag>
        <tag>Log4j2</tag>
        <tag>Logging</tag>
      </tags>
  </entry>
  <entry>
    <title>常用缓存算法——LRU</title>
    <url>/posts/2018-01-01-LRU-algorithms/</url>
    <content><![CDATA[<h3 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h3><p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)">Least recently used（LRU）</a>一种常用的缓存算法,通过首先丢弃最近最少使用的记录。LRU算法需要跟踪何时使用了什么，并确保算法始终丢弃最近最少使用的记录。<br>LRU算法及其实现-以LinkedHashMap为例：</p>
<h3 id="LRU-使用LinkedHashMap代码实现"><a href="#LRU-使用LinkedHashMap代码实现" class="headerlink" title="LRU 使用LinkedHashMap代码实现"></a>LRU 使用<code>LinkedHashMap</code>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ordiy.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经典的LRU 算法</span></span><br><span class="line"><span class="comment"> *  热点数据缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:ordiy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">( <span class="keyword">int</span> cacheSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cacheSize,(<span class="keyword">float</span>)<span class="number">0.75</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span></span>&#123;</span><br><span class="line">       <span class="comment">// System.out.println(eldest);</span></span><br><span class="line">        <span class="keyword">return</span> size() &gt; cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LRUCache&lt;String,Integer&gt; cache =  <span class="keyword">new</span> LRUCache&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//初始化数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        cache.put(<span class="string">&quot;key&quot;</span>+i,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模拟最近使用</span></span><br><span class="line">    String key = <span class="string">&quot;key3&quot;</span>;</span><br><span class="line">    cache.get(key);</span><br><span class="line">    System.out.println(<span class="string">&quot;after get--&gt;:&quot;</span>+ key);</span><br><span class="line">    printMap(cache);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put data and remove Eldest Entry</span></span><br><span class="line">    cache.put(<span class="string">&quot;key10&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;after put data and remove Eldest Entry&quot;</span>);</span><br><span class="line">    printMap(cache);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">after get--&gt;:key3</span><br><span class="line">cache order:</span><br><span class="line">key0=0 hashCode: 3288497 , key1=1 hashCode: 3288499 , key2=2 hashCode: 3288497 , key4=4 hashCode: 3288497 , key3=3 hashCode: 3288503 ,</span><br><span class="line">3288497</span><br><span class="line">after put data and remove Eldest Entry</span><br><span class="line">cache order:</span><br><span class="line">key1=1 hashCode: 3288499 , key2=2 hashCode: 3288497 , key4=4 hashCode: 3288497 , key3=3 hashCode: 3288503 , key10=10 hashCode: 101943476 ,</span><br></pre></td></tr></table></figure></li>
<li><p>过程解析<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200602183106.png" alt="images"></p>
</li>
</ul>
<p>使用<code>LinkedHashMap</code>的记录数据顺序、accessOrder、removeEldestEntry特性实现了一个简单的LRU。在分布式场景下，需要使用类似redis,pika等软件进行实现。<br><strong>注意 因为<code>LinkedHashMap</code>并非线程安全的，多线程场景需要使用<code>Collections.synchronizedMap</code>进行包装</strong><br>**分布式场景可以用 Redis 等组件实现 **</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>LRU缓存有其局限性，在类似于双11这样的场景，流量/活跃用户突然大增时会出现缓存击穿问题。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://juejin.im/post/5a4b433b6fb9a0451705916f">https://juejin.im/post/5a4b433b6fb9a0451705916f</a><br><a href="https://segmentfault.com/a/1190000012964859">LinkedHashMap 源码详细分</a><br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html">oracle doc LinkedHashMap</a><br><a href="https://juejin.im/post/5a4b433b6fb9a0451705916f">Java集合类 LinkedHashMap</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Net</tag>
        <tag>LRU</tag>
        <tag>Java</tag>
        <tag>CoreJava</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberrypi compile and install nginx</title>
    <url>/posts/2018-03-11-arm-compile-nginx/</url>
    <content><![CDATA[<h1 id="ARM处理器的集中指令集"><a href="#ARM处理器的集中指令集" class="headerlink" title="ARM处理器的集中指令集"></a>ARM处理器的集中指令集</h1><table>
<thead>
<tr>
<th align="left">移殖</th>
<th align="left">架构</th>
<th align="left">简介</th>
</tr>
</thead>
<tbody><tr>
<td align="left">armel</td>
<td align="left">EABI ARM</td>
<td align="left">是arm eabi little endian的缩写。eabi是软浮点二进制接口，这里的e是embeded，是对于嵌入式设备而言。</td>
</tr>
<tr>
<td align="left">armhf</td>
<td align="left">是arm hard float的缩写。   ARMv7</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">arm64</td>
<td align="left">64-bit ARM ,ARMV8</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">armel和armhf的区别</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">它们的区别体现在浮点运算上，它们在进行浮点运算时都会使用fpu，但是armel传参数用普通寄存器，而armhf传参数用的是fpu的寄存器，因此armhf的浮点运算性能更高。</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">gcc编译的时候，使用-mfloat-abi选项来指定浮点运算使用的是哪种，soft不使用fpu，armel使用fpu，使用普通寄存器，armhf使用fpu，使用fpu的寄存器。</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="ARM-compile-NGINX"><a href="#ARM-compile-NGINX" class="headerlink" title="ARM compile NGINX"></a>ARM compile NGINX</h1><p> 下载软件包，以便我们编译nginx：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # init </span><br><span class="line">$ sudo apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev</span><br><span class="line"></span><br><span class="line"> &#96;&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">清理ningx config file ：&#x2F;etc&#x2F;nginx</span><br></pre></td></tr></table></figure><br>$ sudo apt remove nginx<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># download </span><br></pre></td></tr></table></figure><br> $ wget <a href="https://nginx.org/download/nginx-1.19.9.zip">https://nginx.org/download/nginx-1.19.9.zip</a><br> $ wget <a href="https://nginx.org/download/nginx-1.19.9.zip.asc">https://nginx.org/download/nginx-1.19.9.zip.asc</a></p>
<p>$ gpg --verify nginx-1.13.11.tar.gz.asc nginx-1.13.11.tar.gz</p>
<p>$ tar -zxvf nginx-1.13.11.tar.gz<br>$ cd nginx-1.13.11</p>
<p>$ ./configure<br>    --sbin-path=/usr/local/nginx/nginx<br>    --conf-path=/usr/local/nginx/nginx.conf<br>    --pid-path=/usr/local/nginx/nginx.pid<br>    --with-http_ssl_module</p>
<p>$ make<br>$ sudo make install<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- test </span><br></pre></td></tr></table></figure></p>
<h1 id="nginx-test"><a href="#nginx-test" class="headerlink" title="nginx test"></a>nginx test</h1><p>sudo nginx -t </p>
<p>nginx version: nginx/1.19.7<br>built by gcc 8.3.0 (Raspbian 8.3.0-6+rpi1)<br>configure arguments:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>curl -i -XGET &#39;<a href="http://127.0.0.1&/#39;">http://127.0.0.1&#39;</a></p>
<pre><code>
# 总结
ARM 处理器目前有多种CPU架构，编译时需要注意。

# 参考

[ARM Cortex A78](https://developer.arm.com/ip-products/processors/cortex-a/cortex-a78?_ga=2.96347861.810840481.1619338199-1241787852.1619338199)
</code></pre>
]]></content>
      <categories>
        <category>tech</category>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>NGINX</tag>
        <tag>Raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Stream L4 负载均衡</title>
    <url>/posts/2018-04-12-nginx-l4-loadblance-md/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用Nginx Stream实现反向代理（通信协议：TCP），并结合DNS、keepalived 和VIP ，实现Nginx Stream的多活和高可用。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200814175544.png"></p>
<h2 id="实现与配置"><a href="#实现与配置" class="headerlink" title="实现与配置"></a>实现与配置</h2><h3 id="Nginx-Stream-安装"><a href="#Nginx-Stream-安装" class="headerlink" title="Nginx Stream 安装"></a>Nginx Stream 安装</h3><p>Nginx Stream 编译安装，参照本文 <a href="./">附录一 Nignx Stream 安装</a><br>注意: 在centos7 OS上通过yum安装的nginx-all-modules 已经包含Nginx Stream module,可以直接使用<a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS">cenots/RHEL yum install nginx</a></p>
<h3 id="Nginx-Stream-L4-负载基本配置"><a href="#Nginx-Stream-L4-负载基本配置" class="headerlink" title="Nginx Stream L4 负载基本配置"></a>Nginx Stream L4 负载基本配置</h3><h4 id="Nginx-Stream-配置"><a href="#Nginx-Stream-配置" class="headerlink" title="Nginx Stream 配置"></a>Nginx Stream 配置</h4><p>Nginx Stream 使用过程中可能还会遇到需要进行负载均衡方式调整、A/B测试、流量镜像、使用TLS加密、记录日志和配置多活等。</p>
<h4 id="负载均衡方法"><a href="#负载均衡方法" class="headerlink" title="负载均衡方法"></a>负载均衡方法</h4><p>在upstream 的几种负载均衡方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend_ods &#123;</span><br><span class="line">     <span class="built_in">hash</span> $remote_addr<span class="variable">$remote_port</span> consistent;</span><br><span class="line">     server 10.224.17.246:10091;</span><br><span class="line">     server 10.224.17.246:10092;</span><br><span class="line">     server 10.224.17.246:10093;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">load blance</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>hash $remote_addr consistent</code></td>
<td align="left">按client ip(ipv4/ipv6) addrees进行hash和取模（计算可以表示为： mod(hash($remote_addr),upstream_size)), 同一个client的所有会被分发给一个后端节点。问题：单个cleint的并发很高时，会造后端服务节点的负载不均衡。好处：方便跟踪日志和抓包</td>
</tr>
<tr>
<td align="left"><code>hash $remote_addr$remote_port  consistent</code></td>
<td align="left">按client ip(ipv4/ipv6) addrees + client port进行hash和取模，可以更好的实现后端节点的负载均衡</td>
</tr>
<tr>
<td align="left"><code>hash $connection  consistent</code></td>
<td align="left">按 client 链接到nginx 的 <code>connection serial number</code> 进行hash和取模，这个方式类似于<code>$remote_addr$remote_port</code></td>
</tr>
</tbody></table>
<p>*这里<code>consistent</code> 常量的作用是避免增加或者删除后端server时候，大量服务断开的问题。参照：<a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#hash"> consistent parameter</a></p>
<p>Nginx Stream其它负载均衡方法：<code>least_conn</code>,<code>least_time</code>,<code>random</code>。</p>
<h4 id="Stream-流量镜像"><a href="#Stream-流量镜像" class="headerlink" title="Stream 流量镜像"></a>Stream 流量镜像</h4><p>将生产环境的一部分流量转发到指定节点进行压力测试或者灰度测试， 因为nginx 的mirro module是不支持stream模式下的流量复制，这里需要借助使用<code>iptables</code>实现。<br>实现复制10.224.18.34：9443的进站流量到<code>10.224.17.246:10095</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t mangle -A PREROUTING -d 10.224.18.34 -dport 9443 -j TEE --gateway 10.224.17.246:10095</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里需要配置<a href="https://www.linode.com/docs/security/firewalls/control-network-traffic-with-iptables/"><code>iptables-servcie</code></a>和<br><a href="https://forums.centos.org/viewtopic.php?f=50&t=67768">Mirroring outbound https traffic w/ iptables</a><br>注意：如果是TLS加密数据，镜像后的流量需要解密。</p>
<h4 id="Stream-A-B测试"><a href="#Stream-A-B测试" class="headerlink" title="Stream A/B测试"></a>Stream A/B测试</h4><p>将流量进行切分，执行A/B测试的场景。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200814172223.png"></p>
<p>配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">   upstream backend_ods &#123;</span><br><span class="line">      <span class="built_in">hash</span> <span class="variable">$connection</span> consistent;</span><br><span class="line">      server 10.224.17.246:10091 ;</span><br><span class="line">      server 10.224.17.245:10091  ;</span><br><span class="line">   &#125;</span><br><span class="line">   upstream test_ods&#123;</span><br><span class="line">       server 10.224.17.242:10092;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#20% 流量用于验证 test_ods group upstream </span></span><br><span class="line">    split_clients <span class="string">&quot;<span class="variable">$&#123;remote_addr&#125;</span>AAA&quot;</span> <span class="variable">$upstream</span> &#123;</span><br><span class="line">                  80%                backend_ods;</span><br><span class="line">                  *                  test_ods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen 9443 so_keepalive=on so_keepalive=30m::10;</span><br><span class="line">        <span class="comment">#后端节点链接超时时间，如果所有后端节点存在异常，应快速断开，避免数据堆积</span></span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">        proxy_timeout 30m;</span><br><span class="line">        proxy_pass <span class="variable">$upstream</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>split_clients</code>分流算法使用<code>MurmurHash2</code></li>
<li>详情参考<a href="http://nginx.org/en/docs/stream/ngx_stream_split_clients_module.html">ngx_stream_split_clients_module</a></li>
</ul>
<h4 id="配置Stream-TLS-SSL"><a href="#配置Stream-TLS-SSL" class="headerlink" title="配置Stream TLS/SSL"></a>配置Stream TLS/SSL</h4><p>如果程序涉及的数据比较机密或者或者网络环境不可信时，需要使用<code>stream_ssl_preread_module</code>配置TLS 证书进行加密,配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen     9443;</span><br><span class="line">    proxy_pass backend_ods;</span><br><span class="line">    proxy_ssl  on;</span><br><span class="line">    ssl_certificate        /etc/ssl/certs/server.crt;</span><br><span class="line">    ssl_certificate_key    /etc/ssl/certs/server.key;</span><br><span class="line">    proxy_ssl_trusted_certificate /etc/ssl/certs/trusted_ca_cert.crt;</span><br><span class="line">    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers    HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="comment"># default 60s</span></span><br><span class="line">    ssl_handshake_timeout 10s;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可能涉及配置证书等操作，请参照<a href="https://ordiychen.github.io/2020-01-01-tls-truststores-md/">HTTP2 TLS加密通信理解与应用</a></li>
<li>跟多配置信息<a href="http://nginx.org/en/docs/stream/ngx_stream_ssl_module.html">ngx_stream_ssl_module</a></li>
</ul>
<h4 id="配置Stream-log"><a href="#配置Stream-log" class="headerlink" title="配置Stream log"></a>配置Stream log</h4><p>在Nginx Stream 调试时，需要输出一些详细日志用于问题定位和检查，需要使用<code>ngx_stream_log_module</code> 打印更多日志信息。<br>记录请求数据日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">   log_format basic <span class="string">&#x27;$remote_addr$remote_port [$time_local] &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;$protocol $status $bytes_sent $bytes_received &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;$session_time  &quot;$upstream_addr&quot; &#x27;</span> <span class="string">&#x27;&quot;$upstream_bytes_sent&quot; &quot;$upstream_bytes_received&quot; &quot;$upstream_connect_time&quot;&#x27;</span>;</span><br><span class="line">   access_log /var/<span class="built_in">log</span>/nginx/nginx-access.log basic buffer=32k;</span><br><span class="line">   error_log  /var/<span class="built_in">log</span>/nginx/error.log info;</span><br><span class="line">   open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        ......</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加对TLS 的日志记录，便于查看client 使用的加密方法等信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream &#123;</span><br><span class="line">    log_format sslparams <span class="string">&#x27;$ssl_protocol $ssl_cipher &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;$remote_addr &#x27;</span> ;</span><br><span class="line">   access_log  /var/<span class="built_in">log</span>/nginx/sslparams.log sslparams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：使用yum intall nginx 安装的无法配置 stream log( 缺少<code>ngx_stream_log_module</code>)</li>
<li>跟多配置参数：<a href="http://nginx.org/en/docs/stream/ngx_stream_log_module.html">ngx_stream_log_module</a></li>
</ul>
<h3 id="配置多活"><a href="#配置多活" class="headerlink" title="配置多活"></a>配置多活</h3><p>使用keepalive 配置多活，这里keepalived + VIP + DNS 实现多活，整个逻辑和实现如下图<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200817100506.png" alt="images"></p>
<ul>
<li>安装于配置<a href="https://access.redhat.com/discussions/3007011">keepalived multiple vips</a></li>
</ul>
<h3 id="Nginx-Stream-L4-代理遇到的问题"><a href="#Nginx-Stream-L4-代理遇到的问题" class="headerlink" title="Nginx Stream L4 代理遇到的问题"></a>Nginx Stream L4 代理遇到的问题</h3><h4 id="Health-Check"><a href="#Health-Check" class="headerlink" title="Health Check"></a>Health Check</h4><p>Nginx Stream 官方的health check(<a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_hc_module.html#health_check">ngx_stream_upstream_hc_module</a>)需要使用商业订阅, $2500/Year起。社区有一些替代方案：<br><a href="https://github.com/lusis/ngx_stream_upstream_check_module">ngx_stream_upstream_health_check</a>  </p>
<ul>
<li>注意 ngx_stream_upstream_health_check 方案需要后端程序提供http port （对于微服务很适用)</li>
<li>吐槽 PS:  HaProxy Health Check 在社区版本是免费提供</li>
</ul>
<h4 id="后端服务平滑升级会出现-TCP链接断开的问题"><a href="#后端服务平滑升级会出现-TCP链接断开的问题" class="headerlink" title="后端服务平滑升级会出现 TCP链接断开的问题"></a>后端服务平滑升级会出现 TCP链接断开的问题</h4><p>为避免增加或者删除后端服务节点时，出现大量TCP 链接重连，建议将loadBalance策略配置为 <code>hash $remote_addr$remote_port  consistent</code> 或者类似的，可以减少链接断开的情况，但后端服务重启时部分反向代理到该节点的client 连接依然会断开。这个问题暂时没解决。</p>
<h4 id="参数优化问题"><a href="#参数优化问题" class="headerlink" title="参数优化问题"></a>参数优化问题</h4><ul>
<li>TCP keepalived 参数设置,优化点如下；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许一定时间的会话保持 避免频繁断开连接</span></span><br><span class="line">listen 9443 so_keepalive=on so_keepalive=30m::10;</span><br><span class="line"><span class="comment">#后端节点链接超时时间，如果所有后端节点存在异常，应快速断开，避免数据堆积</span></span><br><span class="line">proxy_connect_timeout 10s;</span><br><span class="line">proxy_timeout 30m;</span><br></pre></td></tr></table></figure></li>
<li>设置读写缓冲区<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listen address:9443 ssl sndbuf&#x3D;128k rcvbuf&#x3D;128k</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">   preread_buffer_size 1024k</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
设置<code>sndbuf</code> <code>rcvbuf</code> 可以设置每个 Socket的读写缓冲区大小。</li>
</ul>
<h4 id="流量镜像的操作非常不方便"><a href="#流量镜像的操作非常不方便" class="headerlink" title="流量镜像的操作非常不方便"></a>流量镜像的操作非常不方便</h4><p>如果需要使用该功能，还是推荐使用HaProxy</p>
<h4 id="性能方面"><a href="#性能方面" class="headerlink" title="性能方面"></a>性能方面</h4><p>Nginx Stram 性能测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">机器: 8核心16G内存 Centos7 </span><br><span class="line">流量:  速率5W&#x2F;S （流量大小：grpc request 1kb）</span><br><span class="line">备注：这里没有测试到Nginx Stream 在以上配置和场景下可以承载流量的最大值，结合社区的资料估计在15W+ </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200817102547.png"></p>
<ul>
<li>备注：在TCP 反向代理上，HaProxy 在性能方面更有优势</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>参考文献：<br> <a href="http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#hash">http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#hash</a></p>
<h2 id="附录-Nginx-安装"><a href="#附录-Nginx-安装" class="headerlink" title="附录 Nginx 安装"></a>附录 Nginx 安装</h2><h3 id="检查openssl-版本"><a href="#检查openssl-版本" class="headerlink" title="检查openssl 版本"></a>检查openssl 版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure>
<p><code>OpenSSL 1.0.1e-fips 11 Feb 2013</code> 为了便于TLS1.3等使用，需要将openssl 升级到最新版本 <code>1.1.1</code></p>
<h3 id="升级openssl"><a href="#升级openssl" class="headerlink" title="升级openssl"></a>升级openssl</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.17.0.tar.gz</span><br><span class="line"></span><br><span class="line">cd nginx-1.17.0</span><br><span class="line"></span><br><span class="line">#install make </span><br><span class="line">.&#x2F;config</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行openssl 出现错误:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openssl version</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;openssl: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用以下步骤修复该问题：</p>
<ul>
<li><p>Create links to libssl:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;lib64&#x2F;libssl.so.1.1 &#x2F;usr&#x2F;lib64&#x2F;</span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;lib64&#x2F;libcrypto.so.1.1 &#x2F;usr&#x2F;lib64&#x2F;</span><br></pre></td></tr></table></figure></li>
<li><p>Finally create link to new openssl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/openssl /usr/bin/openssl_latest</span><br></pre></td></tr></table></figure></li>
<li><p>测试版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl_latest version</span><br><span class="line">OpenSSL 1.1.0f 25 May 2017</span><br><span class="line">Additional tips</span><br></pre></td></tr></table></figure>
<p>设置最新的openssl:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin/</span><br><span class="line">mv openssl openssl_old</span><br><span class="line">mv openssl_latest openssl</span><br></pre></td></tr></table></figure>

<p>检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure>

<h3 id="检查和升级zlib"><a href="#检查和升级zlib" class="headerlink" title="检查和升级zlib"></a>检查和升级zlib</h3><p>nginx 压缩gzip 使用 zlip库进行压缩。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yun info zlip </span><br></pre></td></tr></table></figure>
<p>版本是 2.0.7 将其升级到zlib-1.2.11</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># install </span></span><br><span class="line"><span class="built_in">cd</span> zlib-1.2.11 </span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zlib</span><br><span class="line">sudo make &amp;&amp; sudo make check &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在/etc/ld.so.conf 新增lib </span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;/usr/local/zlib/lib&quot;</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># reoload </span></span><br><span class="line">sudo ldconfig -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>zlib 升级完成</p>
<h3 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h3><p>PCRE 用于Nginx正则进行重写要用到, 需要注意nginx 是不支持PCRE2的。这里将其升级到 PCRE 8.44 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx 支持的最新 pcre版本是 8.43 </span></span><br><span class="line"><span class="built_in">cd</span> ./nginx-module</span><br><span class="line">wget https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pcre-8.43</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">make </span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#check </span></span><br><span class="line">pcre-config --verison</span><br></pre></td></tr></table></figure>

<h3 id="编译安装-nginx"><a href="#编译安装-nginx" class="headerlink" title="编译安装 nginx"></a>编译安装 nginx</h3><p>执行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/nginx-18.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure</span></span><br><span class="line">./configure \</span><br><span class="line">--sbin-path=/usr/<span class="built_in">local</span>/nginx/nginx \</span><br><span class="line">--conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf \</span><br><span class="line">--pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_geoip_module \</span><br><span class="line">--with-stream_ssl_preread_module  \</span><br><span class="line">--with-pcre=./nginx-modules/pcre-8.43 \</span><br><span class="line">--with-pcre-jit \</span><br><span class="line">--with-openssl=./nginx-modules/openssl-1.1.1g \</span><br><span class="line">--with-zlib=./nginx-modules/zlib-1.2.11 \</span><br><span class="line">--add-module=./ngx_stream_upstream_check_module \</span><br><span class="line">--with-debug</span><br><span class="line"></span><br><span class="line">make </span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#check </span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/nginx -V </span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx version: nginx/1.18.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)</span><br><span class="line">built with OpenSSL 1.1.1g  21 Apr 2020</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --sbin-path=/usr/<span class="built_in">local</span>/nginx/nginx --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf --pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-stream --with-stream=dynamic --with-stream_ssl_module --with-stream_realip_module --with-stream_geoip_module --with-stream_geoip_module=dynamic --with-stream_ssl_preread_module --with-pcre=./nginx-modules/pcre-8.43 --with-pcre-jit --with-openssl=./nginx-modules/openssl-1.1.1g --with-zlib=./nginx-modules/zlib-1.2.11 --with-debug</span><br></pre></td></tr></table></figure>

<h3 id="设置防火墙"><a href="#设置防火墙" class="headerlink" title="设置防火墙"></a>设置防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo firewall-cmd --add-port=8443/tcp --permanent</span><br><span class="line">sudo firewall-cmd --add-port=8443/udp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># reload </span></span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查</span></span><br><span class="line">sudo firewall-cmd --zone=public --list-all</span><br></pre></td></tr></table></figure>

<h4 id="使用nc-测试stream"><a href="#使用nc-测试stream" class="headerlink" title="使用nc 测试stream"></a>使用<code>nc</code> 测试stream</h4><p>在nginx node 可以使用<code>nc -l 10091</code> 启动端口监听，方便进行测试。<br>client可以使用telnet 也可以使用<code>nc</code>。</p>
<p>参考：</p>
<ul>
<li><a href="http://nginx.org/en/docs/configure.html">Building nginx from Sources</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>nginx stream</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Nginx</tag>
        <tag>Nginx Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>使用log4j2 jsonLayout自定义JSON格式日志</title>
    <url>/posts/2019-01-01-log4j2-json-layout/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>log4j2 在性能上提升了很多，可以减小日志输出对高并发程序的性能。<br>程序的日志需要输出为json格式，通过ELK 收集和存储日志，使用json格式便于Elasticsearch提取JSON字段信息，进行搜索或者通过Kinana展示</p>
<p><img src="https://logging.apache.org/log4j/2.x/images/async-throughput-comparison.png" alt="images"></p>
<h1 id="log4j2-JsonLayout使用"><a href="#log4j2-JsonLayout使用" class="headerlink" title="log4j2 JsonLayout使用"></a>log4j2 JsonLayout使用</h1><h3 id="log4j2-输出json-log-使用示例"><a href="#log4j2-输出json-log-使用示例" class="headerlink" title="log4j2 输出json log 使用示例"></a>log4j2 输出json log 使用示例</h3><p> maven pom 依赖：<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.compile.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.compile.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">log4j-api.version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">log4j-api.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- json format --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>Java Code  示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogJsonTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LogManager.getLogger(LogJsonTest.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadContext.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;current index:&#123;&#125;,date:&#123;&#125;&quot;</span>,i, LocalDateTime.now().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">&quot;hello i am fool&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123; log.error(<span class="string">&quot;error cause:&quot;</span>,e); &#125;</span><br><span class="line">        <span class="comment">// test json object demo</span></span><br><span class="line">        log.info(<span class="string">&quot;demo str:&#123;&#125;&quot;</span>,<span class="keyword">new</span> Demo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> String he=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.toString(arr.toArray()) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>log4j <code>log4j2.xml</code>配置示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;OFF&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logPath&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logLevel&quot;</span>&gt;</span>info<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;project&quot;</span> &gt;</span>spring-cloud-app-demo<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- complete=&quot;true&quot;   Complete well-formed JSON    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">JsonLayout</span> <span class="attr">complete</span>=<span class="string">&quot;false&quot;</span> <span class="attr">compact</span>=<span class="string">&quot;true&quot;</span> <span class="attr">eventEol</span>=<span class="string">&quot;true&quot;</span> <span class="attr">properties</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">locationInfo</span>=<span class="string">&quot;true&quot;</span>  <span class="attr">includeStacktrace</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">stacktraceAsString</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">objectMessageAsJsonObject</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;project&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;project&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">JsonLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.github.ordiy&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>json 日志输出格式</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;thread&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="attr">&quot;level&quot;</span>:<span class="string">&quot;ERROR&quot;</span>,<span class="attr">&quot;loggerName&quot;</span>:<span class="string">&quot;com.github.ordiy.LogJsonTest&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;error cause:&quot;</span>,<span class="attr">&quot;thrown&quot;</span>:&#123;<span class="attr">&quot;commonElementCount&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;localizedMessage&quot;</span>:<span class="string">&quot;hello i am fool&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;hello i am fool&quot;</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;java.lang.RuntimeException&quot;</span>,<span class="attr">&quot;extendedStackTrace&quot;</span>:<span class="string">&quot;java.lang.RuntimeException: hello i am fool\n\tat com.github.ordiy.LogJsonTest.main(LogJsonTest.java:24) [classes/:?]\n&quot;</span>&#125;,<span class="attr">&quot;endOfBatch&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;loggerFqcn&quot;</span>:<span class="string">&quot;org.apache.logging.log4j.spi.AbstractLogger&quot;</span>,<span class="attr">&quot;instant&quot;</span>:&#123;<span class="attr">&quot;epochSecond&quot;</span>:<span class="number">1594867434</span>,<span class="attr">&quot;nanoOfSecond&quot;</span>:<span class="number">597759000</span>&#125;,<span class="attr">&quot;contextMap&quot;</span>:&#123;<span class="attr">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;,<span class="attr">&quot;threadId&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;threadPriority&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;source&quot;</span>:&#123;<span class="attr">&quot;class&quot;</span>:<span class="string">&quot;com.github.ordiy.LogJsonTest&quot;</span>,<span class="attr">&quot;method&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="attr">&quot;file&quot;</span>:<span class="string">&quot;LogJsonTest.java&quot;</span>,<span class="attr">&quot;line&quot;</span>:<span class="number">26</span>,<span class="attr">&quot;classLoaderName&quot;</span>:<span class="string">&quot;app&quot;</span>&#125;,<span class="attr">&quot;project&quot;</span>:<span class="string">&quot;spring-cloud-app-demo&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;thread&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="attr">&quot;level&quot;</span>:<span class="string">&quot;INFO&quot;</span>,<span class="attr">&quot;loggerName&quot;</span>:<span class="string">&quot;com.github.ordiy.LogJsonTest&quot;</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;demo str:com.github.ordiy.LogJsonTest$Demo@18cebaa5&quot;</span>,<span class="attr">&quot;endOfBatch&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;loggerFqcn&quot;</span>:<span class="string">&quot;org.apache.logging.log4j.spi.AbstractLogger&quot;</span>,<span class="attr">&quot;instant&quot;</span>:&#123;<span class="attr">&quot;epochSecond&quot;</span>:<span class="number">1594867434</span>,<span class="attr">&quot;nanoOfSecond&quot;</span>:<span class="number">611577000</span>&#125;,<span class="attr">&quot;contextMap&quot;</span>:&#123;<span class="attr">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;,<span class="attr">&quot;threadId&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;threadPriority&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;source&quot;</span>:&#123;<span class="attr">&quot;class&quot;</span>:<span class="string">&quot;com.github.ordiy.LogJsonTest&quot;</span>,<span class="attr">&quot;method&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="attr">&quot;file&quot;</span>:<span class="string">&quot;LogJsonTest.java&quot;</span>,<span class="attr">&quot;line&quot;</span>:<span class="number">29</span>,<span class="attr">&quot;classLoaderName&quot;</span>:<span class="string">&quot;app&quot;</span>&#125;,<span class="attr">&quot;project&quot;</span>:<span class="string">&quot;spring-cloud-app-demo&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="json-layout-配置说明"><a href="#json-layout-配置说明" class="headerlink" title="json layout 配置说明"></a>json layout 配置说明</h3><p>JsonLayout可以使用<code>compact</code> <code>locationInfo</code> 等配置输出格式和内容,配置项解说参照<a href="https://logging.apache.org/log4j/2.x/manual/layouts.html#JSONLayout">log4j2 json layout</a><br>常用的配置项目：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">JsonLayout</span> <span class="attr">complete</span>=<span class="string">&quot;false&quot;</span> <span class="attr">compact</span>=<span class="string">&quot;true&quot;</span> <span class="attr">eventEol</span>=<span class="string">&quot;true&quot;</span> <span class="attr">properties</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">locationInfo</span>=<span class="string">&quot;true&quot;</span>  <span class="attr">includeStacktrace</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">stacktraceAsString</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">objectMessageAsJsonObject</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>json 输出格式及备注：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200716104713.png" alt="images"></p>
<h3 id="使用log4j-输出自定义的日志格式"><a href="#使用log4j-输出自定义的日志格式" class="headerlink" title="使用log4j 输出自定义的日志格式"></a>使用log4j 输出自定义的日志格式</h3><p>log4j2.xml 文件内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;OFF&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logPath&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logLevel&quot;</span>&gt;</span>info<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;PROJECT_NAME&quot;</span> &gt;</span>spring-cloud-app-demo<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- immediateFlush=&quot;false&quot;  不会立即写盘 tail时可能有延时 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;fileOut&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;$&#123;logPath&#125;/info.log&quot;</span> <span class="attr">filepattern</span>=<span class="string">&quot;$&#123;logPath&#125;/%d&#123;yyyy-MM-dd&#125;-info.log&quot;</span>  <span class="attr">immediateFlush</span>=<span class="string">&quot;false&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- complete=&quot;true&quot;   Complete well-formed JSON    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">JsonLayout</span>   <span class="attr">complete</span>=<span class="string">&quot;false&quot;</span> <span class="attr">compact</span>=<span class="string">&quot;true&quot;</span> <span class="attr">eventEol</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">properties</span>=<span class="string">&quot;false&quot;</span> <span class="attr">locationInfo</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">includeStacktrace</span>=<span class="string">&quot;true&quot;</span> <span class="attr">stacktraceAsString</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">objectMessageAsJsonObject</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">                <span class="comment">&lt;!--                &lt;KeyValuePair key=&quot;StudytonightField&quot; value=&quot;studytonightValue&quot; /&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;project&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;PROJECT_NAME&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;timestamp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;date:yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZZ&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$$&#123;ctx:X-B3-ParentSpanId&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;span&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$$&#123;ctx:X-B3-SpanId&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$$&#123;ctx:X-B3-uId&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;trace&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;ctx:X-B3-TraceId&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;PROJECT_NAME&#125;-$&#123;date:yyyy-MM-dd&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- location 记录消耗性能 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">&quot;line_number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- docker id  docker部署使用--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--                &lt;KeyValuePair key=&quot;containerId&quot; value=&quot;$&#123;docker:containerId&#125;&quot;/&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--                &lt;KeyValuePair key=&quot;containerName&quot; value=&quot;$&#123;docker:containerName&#125;&quot;/&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--                &lt;KeyValuePair key=&quot;imageName&quot; value=&quot;$&#123;docker:imageName&#125;&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">JsonLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1000MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">&quot;$&#123;logPath&#125;&quot;</span> <span class="attr">maxDepth</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">&quot;*info.log*&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">&quot;30d&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;fileOut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Java 代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger log = LogManager.getLogger(LogJsonTest.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//log4j ctx</span></span><br><span class="line">        ThreadContext.put(<span class="string">&quot;X-B3-ParentSpanId&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        ThreadContext.put(<span class="string">&quot;X-B3-SpanId&quot;</span>,<span class="string">&quot;world-span&quot;</span>);</span><br><span class="line">        ThreadContext.put(<span class="string">&quot;X-B3-uId&quot;</span>,<span class="string">&quot;world-user&quot;</span>);</span><br><span class="line">        ThreadContext.put(<span class="string">&quot;X-B3-uId&quot;</span>,<span class="string">&quot;world-user&quot;</span>);</span><br><span class="line">        ThreadContext.put(<span class="string">&quot;X-B3-TraceId&quot;</span>,<span class="string">&quot;world-trace&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;current index:&#123;&#125;,date:&#123;&#125;&quot;</span>,i, LocalDateTime.now().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">&quot;hello i am fool&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123; log.error(<span class="string">&quot;error cause:&quot;</span>,e); &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Json日志输出文件示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;thread&quot;:&quot;main&quot;,&quot;level&quot;:&quot;INFO&quot;,&quot;loggerName&quot;:&quot;com.github.ordiy.LogJsonTest&quot;,&quot;message&quot;:&quot;demo str:[]&quot;,&quot;endOfBatch&quot;:false,&quot;loggerFqcn&quot;:&quot;org.apache.logging.log4j.spi.AbstractLogger&quot;,&quot;instant&quot;:&#123;&quot;epochSecond&quot;:1594888243,&quot;nanoOfSecond&quot;:231053000&#125;,&quot;threadId&quot;:1,&quot;threadPriority&quot;:5,&quot;project&quot;:&quot;spring-cloud-app-demo&quot;,&quot;timestamp&quot;:&quot;2020-07-16T16:30:42.913+0800&quot;,&quot;parent&quot;:&quot;world&quot;,&quot;span&quot;:&quot;world-span&quot;,&quot;user&quot;:&quot;world-user&quot;,&quot;trace&quot;:&quot;world-trace&quot;,&quot;index&quot;:&quot;spring-cloud-app-demo-2020-07-16&quot;,&quot;line_number&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>进行pretty 优化展示后的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;thread&quot;:&quot;main&quot;,</span><br><span class="line">   &quot;level&quot;:&quot;INFO&quot;,</span><br><span class="line">   &quot;loggerName&quot;:&quot;com.github.ordiy.LogJsonTest&quot;,</span><br><span class="line">   &quot;message&quot;:&quot;demo str:[]&quot;,</span><br><span class="line">   &quot;endOfBatch&quot;:false,</span><br><span class="line">   &quot;loggerFqcn&quot;:&quot;org.apache.logging.log4j.spi.AbstractLogger&quot;,</span><br><span class="line">   &quot;instant&quot;:&#123;</span><br><span class="line">      &quot;epochSecond&quot;:1594888243,</span><br><span class="line">      &quot;nanoOfSecond&quot;:231053000</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;threadId&quot;:1,</span><br><span class="line">   &quot;threadPriority&quot;:5,</span><br><span class="line">   &quot;project&quot;:&quot;spring-cloud-app-demo&quot;,</span><br><span class="line">   &quot;timestamp&quot;:&quot;2020-07-16T16:30:42.913+0800&quot;,</span><br><span class="line">   &quot;parent&quot;:&quot;world&quot;,</span><br><span class="line">   &quot;span&quot;:&quot;world-span&quot;,</span><br><span class="line">   &quot;user&quot;:&quot;world-user&quot;,</span><br><span class="line">   &quot;trace&quot;:&quot;world-trace&quot;,</span><br><span class="line">   &quot;index&quot;:&quot;spring-cloud-app-demo-2020-07-16&quot;,</span><br><span class="line">   &quot;line_number&quot;:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h1><ul>
<li><p><code>log4j2 jsonLayout</code> 处理<code>MDC</code>的兼容问题<br><code>spring cloud sleuth</code>默认的 Trace日志默认使用的是<code>slf4j</code>在<code>MDC</code>中保存的<code>traceID</code>等信息，  <code>log4j2 jsonLayout</code> 处理<code>MDC</code>，会存在兼容性问题。(貌似可以通过重新实现 <code>JsonLayout</code>解决该问题，可以参照<a href="https://github.com/vy/log4j2-logstash-layout">log4j2-logstash-layout</a>的实现)</p>
</li>
<li><p>代码地址<br><a href="https://github.com/ordiychen/demo-project/tree/master/test-log4j2-json-layout">https://github.com/ordiychen/demo-project/tree/master/test-log4j2-json-layout</a></p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html#JSONLayout">JSONLayout</a></li>
<li><a href="https://www.studytonight.com/post/log4j2-json-layout-configuration-example">Log4j2 JSON Layout Configuration Example</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">log4j2 lookup</a></li>
<li><a href="https://logging.apache.org/log4j/2.x/performance.html">log4j2 performence </a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Java</tag>
        <tag>Log4j2</tag>
        <tag>Logging</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 计算圆周率(译)</title>
    <url>/posts/2019-10-11-python-calc-pi-1/</url>
    <content><![CDATA[<p>翻译自<a href="http://blog.recursiveprocess.com/2013/03/14/calculate-pi-with-python/">calculate-pi-with-python</a></p>
<h1 id="计算圆周率"><a href="#计算圆周率" class="headerlink" title="计算圆周率"></a>计算圆周率</h1><h2 id="贝利-波尔温-普劳夫公式-Bailey–Borwein–Plouffe-formula-方法"><a href="#贝利-波尔温-普劳夫公式-Bailey–Borwein–Plouffe-formula-方法" class="headerlink" title="贝利-波尔温-普劳夫公式(Bailey–Borwein–Plouffe formula)方法"></a>贝利-波尔温-普劳夫公式(Bailey–Borwein–Plouffe formula)方法</h2><p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200722214711.png" alt="images"></p>
<h2 id="Bellard’s-formula-公式"><a href="#Bellard’s-formula-公式" class="headerlink" title="Bellard’s formula 公式"></a><a href="http://en.wikipedia.org/wiki/Bellard%27s_formula">Bellard’s formula 公式</a></h2><p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200722214538.png" alt="images"></p>
<h2 id="Chudnovsky-algorithm-算法"><a href="#Chudnovsky-algorithm-算法" class="headerlink" title="Chudnovsky algorithm 算法"></a><a href="http://en.wikipedia.org/wiki/Chudnovsky_algorithm">Chudnovsky algorithm 算法</a></h2><p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200722214555.png" alt="images"></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Sets decimal to 25 digits of precision</span></span><br><span class="line">getcontext().prec = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plouffBig</span>(<span class="params">n</span>):</span> <span class="comment">#http://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula</span></span><br><span class="line">    pi = Decimal(<span class="number">0</span>)</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pi += (Decimal(<span class="number">1</span>)/(<span class="number">16</span>**k))*((Decimal(<span class="number">4</span>)/(<span class="number">8</span>*k+<span class="number">1</span>))-(Decimal(<span class="number">2</span>)/(<span class="number">8</span>*k+<span class="number">4</span>))-(Decimal(<span class="number">1</span>)/(<span class="number">8</span>*k+<span class="number">5</span>))-(Decimal(<span class="number">1</span>)/(<span class="number">8</span>*k+<span class="number">6</span>)))</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bellardBig</span>(<span class="params">n</span>):</span> <span class="comment">#http://en.wikipedia.org/wiki/Bellard%27s_formula</span></span><br><span class="line">    pi = Decimal(<span class="number">0</span>)</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pi += (Decimal(-<span class="number">1</span>)**k/(<span class="number">1024</span>**k))*( Decimal(<span class="number">256</span>)/(<span class="number">10</span>*k+<span class="number">1</span>) + Decimal(<span class="number">1</span>)/(<span class="number">10</span>*k+<span class="number">9</span>) - Decimal(<span class="number">64</span>)/(<span class="number">10</span>*k+<span class="number">3</span>) - Decimal(<span class="number">32</span>)/(<span class="number">4</span>*k+<span class="number">1</span>) - Decimal(<span class="number">4</span>)/(<span class="number">10</span>*k+<span class="number">5</span>) - Decimal(<span class="number">4</span>)/(<span class="number">10</span>*k+<span class="number">7</span>) -Decimal(<span class="number">1</span>)/(<span class="number">4</span>*k+<span class="number">3</span>))</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    pi = pi * <span class="number">1</span>/(<span class="number">2</span>**<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chudnovskyBig</span>(<span class="params">n</span>):</span> <span class="comment">#http://en.wikipedia.org/wiki/Chudnovsky_algorithm</span></span><br><span class="line">    pi = Decimal(<span class="number">0</span>)</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pi += (Decimal(-<span class="number">1</span>)**k)*(Decimal(factorial(<span class="number">6</span>*k))/((factorial(k)**<span class="number">3</span>)*(factorial(<span class="number">3</span>*k)))* (<span class="number">13591409</span>+<span class="number">545140134</span>*k)/(<span class="number">640320</span>**(<span class="number">3</span>*k)))</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    pi = pi * Decimal(<span class="number">10005</span>).sqrt()/<span class="number">4270934400</span></span><br><span class="line">    pi = pi**(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> pi</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;\t\t\t Plouff \t\t Bellard \t\t\t Chudnovsky&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Iteration number &quot;</span>,i, <span class="string">&quot; &quot;</span>, plouffBig(i), <span class="string">&quot; &quot;</span> , bellardBig(i),<span class="string">&quot; &quot;</span>, chudnovskyBig(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="树莓派p4-计算结果"><a href="#树莓派p4-计算结果" class="headerlink" title="树莓派p4 计算结果"></a>树莓派p4 计算结果</h1><p>循环20 次 <code>Chudnovsky algorithm</code>最快</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">                      Plouff                  Bellard                         Chudnovsky</span><br><span class="line">Iteration number  1   3.133333333333333333333333   3.141765873015873015873017   3.141592653589734207668453</span><br><span class="line">Iteration number  2   3.141422466422466422466422   3.141592571868390306374053   3.141592653589793238462642</span><br><span class="line">Iteration number  3   3.141587390346581523052111   3.141592653642050769944284   3.141592653589793238462642</span><br><span class="line">Iteration number  4   3.141592457567435381837004   3.141592653589755368080514   3.141592653589793238462642</span><br><span class="line">Iteration number  5   3.141592645460336319557021   3.141592653589793267843377   3.141592653589793238462642</span><br><span class="line">Iteration number  6   3.141592653228087534734378   3.141592653589793238438852   3.141592653589793238462642</span><br><span class="line">Iteration number  7   3.141592653572880827785241   3.141592653589793238462664   3.141592653589793238462642</span><br><span class="line">Iteration number  8   3.141592653588972704940778   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  9   3.141592653589752275236178   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  10   3.141592653589791146388777   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  11   3.141592653589793129614171   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  12   3.141592653589793232711293   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  13   3.141592653589793238154767   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  14   3.141592653589793238445978   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  15   3.141592653589793238461733   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  16   3.141592653589793238462594   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  17   3.141592653589793238462641   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  18   3.141592653589793238462644   3.141592653589793238462644   3.141592653589793238462642</span><br><span class="line">Iteration number  19   3.141592653589793238462644   3.141592653589793238462644   3.141592653589793238462642</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tech</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Http-Client5 基本使用</title>
    <url>/posts/2020-01-01-apache-http-client5/</url>
    <content><![CDATA[<p>Apache HttpComponents项目进行Http API使用及<code>I/O Reactor</code></p>
<span id="more"></span>

<h1 id="Apache-http-client-5-0-简介"><a href="#Apache-http-client-5-0-简介" class="headerlink" title="Apache http client 5.0 简介"></a>Apache http client 5.0 简介</h1><p><code>Apache http client 5.0</code>支持了<code>HTTP/2</code>的大部分特性，并对之前版本进行了一些列优化，具体如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Notable changes and features included <span class="keyword">in</span> the 5.0 series are:</span><br><span class="line"></span><br><span class="line">* Support <span class="keyword">for</span> the HTTP/2 protocol and conformance to requirements and</span><br><span class="line">  recommendations of the latest HTTP/2 protocol specification documents</span><br><span class="line">  (RFC 7540, RFC 7541.)</span><br><span class="line">  Supported features:</span><br><span class="line">    ** HPACK header compression</span><br><span class="line">    ** Stream multiplexing (client and server)</span><br><span class="line">    ** Flow control</span><br><span class="line">    ** Response push</span><br><span class="line">    ** Message trailers</span><br><span class="line">    ** Expect-continue handshake</span><br><span class="line">    ** Connection validation (ping)</span><br><span class="line">    ** Application-layer protocol negotiation (ALPN)</span><br><span class="line">    ** TLS 1.2 security features</span><br><span class="line">* Improved conformance to requirements and recommendations of the latest HTTP/1.1 protocol</span><br><span class="line">  specification documents (RFC 7230, RFC 7231.)</span><br><span class="line">* New connection pool implementation with lax connection <span class="built_in">limit</span> guarantees and better</span><br><span class="line">  performance under higher concurrency due to absence of a global pool lock.</span><br><span class="line">* Support <span class="keyword">for</span> Reactive Streams API [http://www.reactive-streams.org/]</span><br><span class="line">* Package name space changed to <span class="string">&#x27;org.apache.hc.client5&#x27;</span>.</span><br><span class="line">* Maven group id changed to <span class="string">&#x27;org.apache.httpcomponents.client5&#x27;</span>.</span><br><span class="line"></span><br><span class="line">HttpClient 5.0 releases can be co-located with earlier major versions on the same classpath</span><br><span class="line">due to the change <span class="keyword">in</span> package names and Maven module coordinates.</span><br></pre></td></tr></table></figure>

<p>Apache HttpComponents由HttpComponentsCore、HttpComponentsClient、HttpComponentsAysyncClient等部分组成。</p>
<h1 id="基本使用用法"><a href="#基本使用用法" class="headerlink" title="基本使用用法"></a>基本使用用法</h1><h2 id="表单登录获取cookie"><a href="#表单登录获取cookie" class="headerlink" title="表单登录获取cookie"></a>表单登录获取cookie</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String admin_userName=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> String admin_userPwd=<span class="string">&quot;admin123&quot;</span>;</span><br><span class="line">String formUserFiledName =<span class="string">&quot;j_username&quot;</span>;</span><br><span class="line">String formPwdFiledName=<span class="string">&quot;j_password&quot;</span>;</span><br><span class="line">BasicCookieStore cookieStore = <span class="keyword">new</span> BasicCookieStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用该方法注意对 CloseableHttpClient 在调用完成后执行 close()方法 || 可以复用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloseableHttpClient <span class="title">buildCookieHttpClient</span><span class="params">(String loginUrl)</span> <span class="keyword">throws</span> IOException, URISyntaxException </span>&#123;</span><br><span class="line">     CloseableHttpClient httpClient = HttpClients.custom()</span><br><span class="line">            .setDefaultCookieStore(cookieStore).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//step1~2 cookie and login</span></span><br><span class="line">        initCookie(httpClient, cookieStore,loginUrl);</span><br><span class="line">        <span class="keyword">int</span> statusCode = loginRanger(httpClient, cookieStore, loginUrl);</span><br><span class="line">        <span class="keyword">if</span> (statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// login failed</span></span><br><span class="line">            log.warn(<span class="string">&quot; ranger-admin login failed ,status_code:&#123;&#125;&quot;</span>, statusCode);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;login ranger-admin failed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> httpClient;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">loginRanger</span><span class="params">(CloseableHttpClient httpClient,BasicCookieStore cookieStore,String rangerLoginUrl)</span> <span class="keyword">throws</span> URISyntaxException, IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;==&gt; loginRanger userName:&#123;&#125;&quot;</span>,admin_userName);</span><br><span class="line">     ClassicHttpRequest login = ClassicRequestBuilder.post()</span><br><span class="line">            .setUri(<span class="keyword">new</span> URI(rangerLoginUrl))</span><br><span class="line">            .addParameter(formUserFiledName, admin_userName)</span><br><span class="line">            .addParameter(formPwdFiledName, admin_userPwd)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> CloseableHttpResponse loginResponse = httpClient.execute(login)) &#123;</span><br><span class="line">        <span class="keyword">final</span> HttpEntity entity = loginResponse.getEntity();</span><br><span class="line">        log.debug(<span class="string">&quot;Login form get: &quot;</span> + loginResponse.getCode() + <span class="string">&quot; &quot;</span> + loginResponse.getReasonPhrase());</span><br><span class="line">        EntityUtils.consume(entity);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;====&gt; Post login cookies:&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> List&lt;Cookie&gt; cookies = cookieStore.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies.isEmpty()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;===&gt; Cookie None&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.size(); i++) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;- &quot;</span> + cookies.get(i).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginResponse.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCookie</span><span class="params">(CloseableHttpClient httpClient, BasicCookieStore cookieStore,String hostUrl)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     HttpGet httpget = <span class="keyword">new</span> HttpGet(hostUrl);</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> CloseableHttpResponse response1 = httpClient.execute(httpget)) &#123;</span><br><span class="line">        <span class="keyword">final</span> HttpEntity entity = response1.getEntity();</span><br><span class="line">        log.debug(<span class="string">&quot;Login form get: &quot;</span> + response1.getCode() + <span class="string">&quot; &quot;</span> + response1.getReasonPhrase());</span><br><span class="line">        EntityUtils.consume(entity);</span><br><span class="line">        log.debug(<span class="string">&quot;Initial set of cookies:&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> List&lt;Cookie&gt; cookies = cookieStore.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies.isEmpty()) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot; get user cookies is None&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.size(); i++) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;get user cookies - &quot;</span> + cookies.get(i).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官方Demo <a href="https://hc.apache.org/httpcomponents-client-5.0.x/httpclient5/examples/ClientFormLogin.java">Apache-Client ClientFormLogin.java</a></p>
<h2 id="POST-request使用示例"><a href="#POST-request使用示例" class="headerlink" title="POST request使用示例"></a><code>POST request</code>使用示例</h2><p><code>POST request</code>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//默认的header</span></span><br><span class="line">List&lt;Header&gt; defaultHeaderArr = Arrays.asList(<span class="keyword">new</span> BasicHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BasicHeader(<span class="string">&quot;Accept-Encoding&quot;</span>, <span class="string">&quot; gzip, deflate&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BasicHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json, text/javascript, */*; q=0.01&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BasicHeader(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BasicHeader(<span class="string">&quot;X-Requested-With&quot;</span>, <span class="string">&quot;XMLHttpRequest&quot;</span>));</span><br><span class="line"></span><br><span class="line">String jsonStr =<span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">HttpPost request = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">headerList.stream().forEach(request::addHeader);</span><br><span class="line">request.setEntity(jsonStr);</span><br><span class="line">httpClient.execute(request);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Get-request-使用示例"><a href="#Get-request-使用示例" class="headerlink" title="Get request 使用示例"></a><code>Get request</code> 使用示例</h2><p><code>Get request</code> 使用demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//build get request with paramer</span></span><br><span class="line">String url =hostUrl + <span class="string">&quot;/service/plugins/policies/service&quot;</span> + <span class="string">&quot;/&quot;</span> + serviceId;</span><br><span class="line">HttpGet getRequest  = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">getRequest.addHeader(HttpHeaders.ACCEPT,<span class="string">&quot;application/json, text/javascript, */*; q=0.01&quot;</span>);</span><br><span class="line">URIBuilder uriBuilder = <span class="keyword">new</span> URIBuilder(getRequest.getUri());</span><br><span class="line">URI uri = uriBuilder</span><br><span class="line">        .addParameter(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        .addParameter(<span class="string">&quot;pageSize&quot;</span>, <span class="string">&quot;2000&quot;</span>)</span><br><span class="line">        .addParameter(<span class="string">&quot;startIndex&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">getRequest.setUri(uri);</span><br><span class="line">httpClient.execute(getRequest);</span><br></pre></td></tr></table></figure>
<p>官方Demo <a href="https://hc.apache.org/httpcomponents-client-5.0.x/httpclient5/examples/QuickStart.java">GetQuickStart.java</a></p>
<h2 id="拦截器特性"><a href="#拦截器特性" class="headerlink" title="拦截器特性"></a>拦截器特性</h2><p>可以通过给client request增加 interceptor可以增加<code>request id</code>和异常拦截等功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">final</span> CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class="line">                <span class="comment">// Add a simple request ID to each outgoing request</span></span><br><span class="line">                .addRequestInterceptorFirst(<span class="keyword">new</span> HttpRequestInterceptor() &#123;</span><br><span class="line">                    <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong count = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">final</span> HttpRequest request,<span class="keyword">final</span> EntityDetails entity,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> HttpException, IOException </span>&#123;</span><br><span class="line">                        request.setHeader(<span class="string">&quot;request-id&quot;</span>, Long.toString(count.incrementAndGet()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// Simulate a 404 response for some requests without passing //the message down to the backend</span></span><br><span class="line">                .addExecInterceptorAfter(ChainElement.PROTOCOL.name(), <span class="string">&quot;custom&quot;</span>, <span class="keyword">new</span> ExecChainHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> ClassicHttpResponse <span class="title">execute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> ClassicHttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> ExecChain.Scope scope,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> ExecChain chain)</span> <span class="keyword">throws</span> IOException, HttpException </span>&#123;</span><br><span class="line">                        <span class="keyword">final</span> Header idHeader = request.getFirstHeader(<span class="string">&quot;request-id&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (idHeader != <span class="keyword">null</span> &amp;&amp; <span class="string">&quot;13&quot;</span>.equalsIgnoreCase(idHeader.getValue())) &#123;</span><br><span class="line">                            <span class="keyword">final</span> ClassicHttpResponse response = <span class="keyword">new</span> BasicClassicHttpResponse(HttpStatus.SC_NOT_FOUND, <span class="string">&quot;Oppsie&quot;</span>);</span><br><span class="line">                            response.setEntity(<span class="keyword">new</span> StringEntity(<span class="string">&quot;bad luck&quot;</span>, ContentType.TEXT_PLAIN));</span><br><span class="line">                            <span class="keyword">return</span> response;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> chain.proceed(request, scope);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">&quot;http://httpbin.org/get&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Executing request &quot;</span> + httpget.getMethod() + <span class="string">&quot; &quot;</span> + httpget.getUri());</span><br><span class="line">                <span class="keyword">try</span> (<span class="keyword">final</span> CloseableHttpResponse response = httpclient.execute(httpget)) &#123;</span><br><span class="line">                    System.out.println(response.getCode() + <span class="string">&quot; &quot;</span> + response.getReasonPhrase());</span><br><span class="line">                    System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>参照官方Demo <a href="https://hc.apache.org/httpcomponents-client-5.0.x/httpclient5/examples/ClientInterceptors.java">ClientInterceptors.java</a></p>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>使用<code>PoolingHttpClientConnectionManager</code>可以实现多线程并发访问，在并发场景下推荐使用异步模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create an HttpClient with the PoolingHttpClientConnectionManager.</span></span><br><span class="line"> <span class="comment">// This connection manager must be used if more than one thread will</span></span><br><span class="line"> <span class="comment">// be using the HttpClient.</span></span><br><span class="line"> <span class="keyword">final</span> PoolingHttpClientConnectionManager cm = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line"> cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"> <span class="keyword">try</span> (<span class="keyword">final</span> CloseableHttpClient httpclient = HttpClients.custom()</span><br><span class="line">         .setConnectionManager(cm)</span><br><span class="line">         .build()) &#123;</span><br><span class="line">     <span class="comment">// create an array of URIs to perform GETs on</span></span><br><span class="line">     <span class="keyword">final</span> String[] urisToGet = &#123;</span><br><span class="line">             <span class="string">&quot;http://hc.apache.org/&quot;</span>,</span><br><span class="line">             <span class="string">&quot;http://hc.apache.org/httpcomponents-core-ga/&quot;</span>,</span><br><span class="line">             <span class="string">&quot;http://hc.apache.org/httpcomponents-client-ga/&quot;</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">// create a thread for each URI</span></span><br><span class="line">     <span class="keyword">final</span> GetThread[] threads = <span class="keyword">new</span> GetThread[urisToGet.length];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">         <span class="keyword">final</span> HttpGet httpget = <span class="keyword">new</span> HttpGet(urisToGet[i]);</span><br><span class="line">         threads[i] = <span class="keyword">new</span> GetThread(httpclient, httpget, i + <span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// start the threads</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">final</span> GetThread thread : threads) &#123;</span><br><span class="line">         thread.start();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// join the threads</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">final</span> GetThread thread : threads) &#123;</span><br><span class="line">         thread.join();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送多个部分的参数"><a href="#发送多个部分的参数" class="headerlink" title="发送多个部分的参数"></a>发送多个部分的参数</h3><p>使用<code>MultipartEntityBuilder</code>可以实现发送多个不同的种类的请求参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try (final CloseableHttpClient httpclient &#x3D; HttpClients.createDefault()) &#123;</span><br><span class="line">    final HttpPost httppost &#x3D; new HttpPost(&quot;http:&#x2F;&#x2F;localhost:8080&quot; +</span><br><span class="line">            &quot;&#x2F;servlets-examples&#x2F;servlet&#x2F;RequestInfoExample&quot;);</span><br><span class="line">    final FileBody bin &#x3D; new FileBody(new File(args[0]));</span><br><span class="line">    final StringBody comment &#x3D; new StringBody(&quot;A binary file of some kind&quot;, ContentType.TEXT_PLAIN);</span><br><span class="line">    final HttpEntity reqEntity &#x3D; MultipartEntityBuilder.create()</span><br><span class="line">            .addPart(&quot;bin&quot;, bin)</span><br><span class="line">            .addPart(&quot;comment&quot;, comment)</span><br><span class="line">            .build();</span><br><span class="line">    httppost.setEntity(reqEntity);</span><br><span class="line">    System.out.println(&quot;executing request &quot; + httppost);</span><br><span class="line">    try (final CloseableHttpResponse response &#x3D; httpclient.execute(httppost)) &#123;</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        final HttpEntity resEntity &#x3D; response.getEntity();</span><br><span class="line">        if (resEntity !&#x3D; null) &#123;</span><br><span class="line">            System.out.println(&quot;Response content length: &quot; + resEntity.getContentLength());</span><br><span class="line">        &#125;</span><br><span class="line">        EntityUtils.consume(resEntity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>基于NIO的<code>HttpAsyncClients</code> 很好的实现了异步请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> IOReactorConfig ioReactorConfig = IOReactorConfig.custom()</span><br><span class="line">               .setSoTimeout(Timeout.ofSeconds(<span class="number">5</span>))</span><br><span class="line">               .build();</span><br><span class="line">       <span class="keyword">final</span> CloseableHttpAsyncClient client = HttpAsyncClients.custom()</span><br><span class="line">               .setIOReactorConfig(ioReactorConfig)</span><br><span class="line">               .build();</span><br><span class="line">       client.start();</span><br><span class="line">       <span class="keyword">final</span> String requestUri = <span class="string">&quot;http://httpbin.org/post&quot;</span>;</span><br><span class="line">       <span class="keyword">final</span> AsyncRequestProducer requestProducer = AsyncRequestBuilder.post(requestUri)</span><br><span class="line">               .setEntity(<span class="keyword">new</span> StringAsyncEntityProducer(<span class="string">&quot;some stuff&quot;</span>, ContentType.TEXT_PLAIN))</span><br><span class="line">               .build();</span><br><span class="line">       <span class="keyword">final</span> Future&lt;SimpleHttpResponse&gt; future = client.execute(requestProducer, SimpleResponseConsumer.create(),</span><br><span class="line">               <span class="keyword">new</span> FutureCallback&lt;SimpleHttpResponse&gt;() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(<span class="keyword">final</span> SimpleHttpResponse response)</span> </span>&#123;</span><br><span class="line">                       System.out.println(requestUri + <span class="string">&quot;-&gt;&quot;</span> + response.getCode());</span><br><span class="line">                       System.out.println(response.getBody());</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(<span class="keyword">final</span> Exception ex)</span> </span>&#123;</span><br><span class="line">                       System.out.println(requestUri + <span class="string">&quot;-&gt;&quot;</span> + ex);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       System.out.println(requestUri + <span class="string">&quot; cancelled&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           future.get();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;Shutting down&quot;</span>);</span><br><span class="line">       client.close(CloseMode.GRACEFUL);</span><br></pre></td></tr></table></figure>

<h3 id="http-client5日志配置"><a href="#http-client5日志配置" class="headerlink" title="http-client5日志配置"></a><code>http-client5</code>日志配置</h3><p><code>http-client5</code>使用了<code>slf4j</code>输出日志，如果需要配置为<code>log4j2</code>需要进行一下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>log4j2.xml</code>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125;.%M\(%line\) - %msg%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.hc.client5.http&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.hc.client5.http.wire&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>官方配置说明 <a href="https://hc.apache.org/httpcomponents-client-5.0.x/logging.html">logger guide</a></p>
<h1 id="HttpComponents的NIO实现——I-O-reactor"><a href="#HttpComponents的NIO实现——I-O-reactor" class="headerlink" title="HttpComponents的NIO实现——I/O reactor"></a>HttpComponents的NIO实现——I/O reactor</h1><p><code>HttpComponents Core</code>包含了2种I/O实现，分别是是BIO和NIO。（参照<a href="https://hc.apache.org/httpcomponents-core-5.0.x/index.html">官方说明</a>）<br>NIO是基于<a href="https://en.wikipedia.org/wiki/Doug_Lea">Doug Lea</a>原子模型的实现的NIO(netty 已经采用Reactor pattern很多年了～～)，关于Doug Lea的这篇文章<a href="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">Scalable IO in Java - Doug Lea</a><br>基本原子线程模型（Doug Lea)：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713183251.png" alt="images"></p>
<p>多线程的原子线程模型（Doug Lea)：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713183446.png" alt="images"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hc.apache.org/httpcomponents-client-5.0.x/quickstart.html">apache HttpComponents</a><br><a href="https://ok2c.github.io/httpcomponents-jackson/">httpcomponents-jackson </a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
        <tag>Apache</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>TLS握手过程</title>
    <url>/posts/2020-01-01-tls-study-md/</url>
    <content><![CDATA[<h2 id="TLS握手过程"><a href="#TLS握手过程" class="headerlink" title="TLS握手过程"></a>TLS握手过程</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> https request</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -i https://dev-local.17xyx.app:2001/test_dir/hello.txt</span> </span><br></pre></td></tr></table></figure>

<p>Network Working Group定义的完整的TLS握手过程：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Client                                               Server</span><br><span class="line"></span><br><span class="line">ClientHello                  --------&gt;</span><br><span class="line">                                                ServerHello</span><br><span class="line">                                               Certificate*</span><br><span class="line">                                         ServerKeyExchange*</span><br><span class="line">                                        CertificateRequest*</span><br><span class="line">                             &lt;--------      ServerHelloDone</span><br><span class="line">Certificate*</span><br><span class="line">ClientKeyExchange</span><br><span class="line">CertificateVerify*</span><br><span class="line">[ChangeCipherSpec]</span><br><span class="line">Finished                     --------&gt;</span><br><span class="line">                                         [ChangeCipherSpec]</span><br><span class="line">                             &lt;--------             Finished</span><br><span class="line">Application Data             &lt;-------&gt;     Application Data</span><br></pre></td></tr></table></figure>
<p>*表示可选 该类消息不总会发送</p>
<ul>
<li><p>Wireshark 抓包TLS握手通信过程：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200731171745.png" alt="images"></p>
</li>
<li><p>TLS1.2 TLS握手过程图解：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200731182242.png" alt="images"><br>注意：在这通信过程中Client的CertificateVerify和服务端CertificateRequest未出现</p>
</li>
</ul>
<p>客户端使用会话的会话ID通过发送ClientHello到，服务器检查其会话缓存匹配，可以进行简单握手(abbreviated handshake),握手过程如下：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Client                                                Server</span><br><span class="line"></span><br><span class="line">ClientHello                   --------&gt;</span><br><span class="line">                                                 ServerHello</span><br><span class="line">                                          [ChangeCipherSpec]</span><br><span class="line">                              &lt;--------             Finished</span><br><span class="line">[ChangeCipherSpec]</span><br><span class="line">Finished                      --------&gt;</span><br><span class="line">Application Data              &lt;-------&gt;     Application Data</span><br></pre></td></tr></table></figure>
<h3 id="传输数据解析"><a href="#传输数据解析" class="headerlink" title="传输数据解析"></a>传输数据解析</h3><h4 id="Client-Hello"><a href="#Client-Hello" class="headerlink" title="Client Hello"></a>Client Hello</h4><p>Client Hello 整个Frame除TCP信息外56Byte外，其余Hex Data结构可以表示为：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">        ProtocolVersion client_version;</span><br><span class="line">        Random random;</span><br><span class="line">        SessionID session_id;</span><br><span class="line">        CipherSuite cipher_suites&lt;2..2^16-2&gt;;</span><br><span class="line">        CompressionMethod compression_methods&lt;1..2^8-1&gt;;</span><br><span class="line">        select (extensions_present) &#123;</span><br><span class="line">            case false:</span><br><span class="line">                struct &#123;&#125;;</span><br><span class="line">            case true:</span><br><span class="line">                Extension extensions&lt;0..2^16-1&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; ClientHello;</span><br></pre></td></tr></table></figure>
<p>数据报文与Wireshark解析结果：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hex Data</span></span><br><span class="line">0000   16 03 01 00 d7 01 00 00 d3 03 03 1e 82 28 e4 0c   .............(..</span><br><span class="line">0010   04 79 5b 6e 71 6e f3 a9 9e 1f c2 df 93 a7 0e dd   .y[nqn..........</span><br><span class="line">0020   16 b9 9a 58 0c fe 61 73 5c 1a 42 00 00 54 c0 30   ...X..as\.B..T.0</span><br><span class="line">0030   c0 2c c0 28 c0 24 c0 14 c0 0a 00 9f 00 6b 00 39   .,.(.$.......k.9</span><br><span class="line">0040   cc a9 cc a8 cc aa ff 85 00 c4 00 88 00 81 00 9d   ................</span><br><span class="line">0050   00 3d 00 35 00 c0 00 84 c0 2f c0 2b c0 27 c0 23   .=.5...../.+.&#x27;.#</span><br><span class="line">0060   c0 13 c0 09 00 9e 00 67 00 33 00 be 00 45 00 9c   .......g.3...E..</span><br><span class="line">0070   00 3c 00 2f 00 ba 00 41 c0 12 c0 08 00 16 00 0a   .&lt;./...A........</span><br><span class="line">0080   00 ff 01 00 00 56 00 00 00 0e 00 0c 00 00 09 6c   .....V.........l</span><br><span class="line">0090   6f 63 61 6c 68 6f 73 74 00 0b 00 02 01 00 00 0a   ocalhost........</span><br><span class="line">00a0   00 08 00 06 00 1d 00 17 00 18 00 0d 00 1c 00 1a   ................</span><br><span class="line">00b0   06 01 06 03 ef ef 05 01 05 03 04 01 04 03 ee ee   ................</span><br><span class="line">00c0   ed ed 03 01 03 03 02 01 02 03 00 10 00 0e 00 0c   ................</span><br><span class="line">00d0   02 68 32 08 68 74 74 70 2f 31 2e 31               .h2.http/1.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Wireshark TLS解析后的结果</span>                     </span><br><span class="line">Transmission Control Protocol, Src Port: 53384, Dst Port: 2001, Seq: 1, Ack: 1, Len: 220</span><br><span class="line">Transport Layer Security</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Client Hello</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.0 (0x0301)</span><br><span class="line">        Length: 215</span><br><span class="line">        Handshake Protocol: Client Hello</span><br><span class="line">            Handshake Type: Client Hello (1)</span><br><span class="line">            Length: 211</span><br><span class="line">            Version: TLS 1.2 (0x0303)</span><br><span class="line">            Random: 1e8228e40c04795b6e716ef3a99e1fc2df93a70edd16b99a…</span><br><span class="line">                GMT Unix Time: Mar 22, 1986 11:37:08.000000000 CST</span><br><span class="line">                Random Bytes: 0c04795b6e716ef3a99e1fc2df93a70edd16b99a580cfe61…</span><br><span class="line">            Session ID Length: 0</span><br><span class="line">            Cipher Suites Length: 84</span><br><span class="line">            Cipher Suites (42 suites)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xc028)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 (0xc024)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)</span><br><span class="line">                .....</span><br><span class="line">                Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff)</span><br><span class="line">            Compression Methods Length: 1</span><br><span class="line">            Compression Methods (1 method)</span><br><span class="line">                Compression Method: null (0)</span><br><span class="line">            Extensions Length: 86</span><br><span class="line">            Extension: server_name (len=14)</span><br><span class="line">                Type: server_name (0)</span><br><span class="line">                Length: 14</span><br><span class="line">                Server Name Indication extension</span><br><span class="line">            Extension: ec_point_formats (len=2)</span><br><span class="line">                Type: ec_point_formats (11)</span><br><span class="line">                Length: 2</span><br><span class="line">                EC point formats Length: 1</span><br><span class="line">                Elliptic curves point formats (1)</span><br><span class="line">                    EC point format: uncompressed (0)</span><br><span class="line">            Extension: supported_groups (len=8)</span><br><span class="line">                Type: supported_groups (10)</span><br><span class="line">                Length: 8</span><br><span class="line">                Supported Groups List Length: 6</span><br><span class="line">                Supported Groups (3 groups)</span><br><span class="line">                    Supported Group: x25519 (0x001d)</span><br><span class="line">                    Supported Group: secp256r1 (0x0017)</span><br><span class="line">                    Supported Group: secp384r1 (0x0018)</span><br><span class="line">            Extension: signature_algorithms (len=28)</span><br><span class="line">                Type: signature_algorithms (13)</span><br><span class="line">                Length: 28</span><br><span class="line">                Signature Hash Algorithms Length: 26</span><br><span class="line">                Signature Hash Algorithms (13 algorithms)</span><br><span class="line">            Extension: application_layer_protocol_negotiation (len=14)</span><br><span class="line">                Type: application_layer_protocol_negotiation (16)</span><br><span class="line">                Length: 14</span><br><span class="line">                ALPN Extension Length: 12</span><br><span class="line">                ALPN Protocol</span><br></pre></td></tr></table></figure>

<h3 id="Server-Hello-结构"><a href="#Server-Hello-结构" class="headerlink" title="Server Hello 结构"></a>Server Hello 结构</h3><p>整个Frame除TCP信息外56Byte外，其余Hex Data结构可以表示为：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"> struct &#123;</span><br><span class="line">     ProtocolVersion server_version;</span><br><span class="line">     Random random;</span><br><span class="line">     SessionID session_id;</span><br><span class="line">     CipherSuite cipher_suite;</span><br><span class="line">     CompressionMethod compression_method;</span><br><span class="line">     select (extensions_present) &#123;</span><br><span class="line">         case false:</span><br><span class="line">             struct &#123;&#125;;</span><br><span class="line">         case true:</span><br><span class="line">             Extension extensions&lt;0..2^16-1&gt;;</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125; ServerHello;</span><br><span class="line"><span class="meta">#</span><span class="bash">The extension format is:</span></span><br><span class="line"> struct &#123;</span><br><span class="line">     ExtensionType extension_type;</span><br><span class="line">     opaque extension_data&lt;0..2^16-1&gt;;</span><br><span class="line"> &#125; Extension;</span><br><span class="line"></span><br><span class="line"> enum &#123;</span><br><span class="line">     signature_algorithms(13), (65535)</span><br><span class="line"> &#125; ExtensionType;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>TLS1.2 ServerHello TSL握手除了<code>ServerHello</code>,还包含了几个ExtensionType，具体如下：</p>
<table>
<thead>
<tr>
<th align="left">ExtensionType</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Certificate</code></td>
<td align="left">证书信息</td>
</tr>
<tr>
<td align="left"><code>Server Key Exchange</code></td>
<td align="left">证书和密钥交换</td>
</tr>
<tr>
<td align="left"><code>Server Hello Done</code></td>
<td align="left">证书信息</td>
</tr>
</tbody></table>
<p><code>CipherSuite</code></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">0000   02 00 00 00 45 00 00 8e 00 00 40 00 40 06 00 00   ....E.....@.@...</span><br><span class="line">0010   7f 00 00 01 7f 00 00 01 07 d1 db 05 4f db 4c ba   ............O.L.</span><br><span class="line">0020   af a4 17 f7 80 18 18 e3 fe 82 00 00 01 01 08 0a   ................</span><br><span class="line">0030   17 fb 61 30 17 fb 61 30 16 03 03 00 55 02 00 00   ..a0..a0....U...</span><br><span class="line">0040   51 03 03 5f 22 ac 4e 6f 61 21 6b 29 77 4a e5 5b   Q.._&quot;.Noa!k)wJ.[</span><br><span class="line">0050   64 3b f0 9c f7 d6 45 c9 bb 12 29 4d f1 0b 4d 51   d;....E...)M..MQ</span><br><span class="line">0060   48 9a 33 20 5f 22 ac 41 a5 f7 21 90 3b c4 87 26   H.3 _&quot;.A..!.;..&amp;</span><br><span class="line">0070   01 94 81 64 03 52 93 2c 0a 06 57 02 23 b7 65 6e   ...d.R.,..W.#.en</span><br><span class="line">0080   25 c2 0c 70 c0 2f 00 00 09 ff 01 00 01 00 00 17   %..p./..........</span><br><span class="line">0090   00 00                                             ..</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> wireshark 解析</span></span><br><span class="line">Transport Layer Security</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Server Hello</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.2 (0x0303)</span><br><span class="line">        Length: 85</span><br><span class="line">        Handshake Protocol: Server Hello</span><br><span class="line">            Handshake Type: Server Hello (2)</span><br><span class="line">            Length: 81</span><br><span class="line">            Version: TLS 1.2 (0x0303)</span><br><span class="line">            Random: 5f22ac4e6f61216b29774ae55b643bf09cf7d645c9bb1229…</span><br><span class="line">            Session ID Length: 32</span><br><span class="line">            Session ID: 5f22ac41a5f721903bc48726019481640352932c0a065702…</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)</span><br><span class="line">            Compression Method: null (0)</span><br><span class="line">            Extensions Length: 9</span><br><span class="line">            Extension: renegotiation_info (len=1)</span><br><span class="line">            Extension: extended_master_secret (len=0)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> TLS 信息解析</span></span><br><span class="line">Transport Layer Security</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Multiple Handshake Messages</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.2 (0x0303)</span><br><span class="line">        Length: 2736</span><br><span class="line">        Handshake Protocol: Server Hello</span><br><span class="line">        Handshake Protocol: Certificate</span><br><span class="line">            Handshake Type: Certificate (11)</span><br><span class="line">            Length: 2499</span><br><span class="line">            Certificates Length: 2496</span><br><span class="line">            Certificates (2496 bytes)</span><br><span class="line">                Certificate Length: 975</span><br><span class="line">                Certificate: 308203cb308201b302147059083695fc34358b5511db272c… (pkcs-9-at-emailAddress=it@17xyx.app,id-at-commonName=dev-local.17xyx.app,id-at-organizationalUnitName=Ltd,id-at-organizationName=Singapoe Dev ltd,id-at-localityName=SG,id-at</span><br><span class="line">                Certificate Length: 1515</span><br><span class="line">                Certificate: 308205e7308203cfa0030201020214505c0f62efd92247c9… (pkcs-9-at-emailAddress=it@17xyx.app,id-at-commonName=17xyx.app,id-at-organizationalUnitName=Ltd,id-at-organizationName=Sg 17xyx Tech.Ltd,id-at-localityName=SG,id-at-stateOrP</span><br><span class="line">        Handshake Protocol: Server Key Exchange</span><br><span class="line">            Handshake Type: Server Key Exchange (12)</span><br><span class="line">            Length: 144</span><br><span class="line">            EC Diffie-Hellman Server Params</span><br><span class="line">                Curve Type: named_curve (0x03)</span><br><span class="line">                Named Curve: secp256r1 (0x0017)</span><br><span class="line">                Pubkey Length: 65</span><br><span class="line">                Pubkey: 04078ee25e7303d05a141e56a2303eeb54902766933474b1…</span><br><span class="line">                Signature Algorithm: ecdsa_secp521r1_sha512 (0x0603)</span><br><span class="line">                Signature Length: 71</span><br><span class="line">                Signature: 3045022100c4ab04ba8fa2f5c90cf251be846a8c4bdc30a7…</span><br><span class="line">        Handshake Protocol: Server Hello Done</span><br><span class="line">            Handshake Type: Server Hello Done (14)</span><br><span class="line">            Length: 0</span><br></pre></td></tr></table></figure>
<h3 id="Client-Key-Exchange-部分"><a href="#Client-Key-Exchange-部分" class="headerlink" title="Client Key Exchange 部分"></a>Client Key Exchange 部分</h3><table>
<thead>
<tr>
<th align="left">message</th>
<th align="left">desc</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Client Key Exchange</td>
<td align="left">收到ServerHelloDone后，可以通过直接设置premaster机密RSA加密机密的传输或通过允许双方达成共识的Diffie-Hellman参数相同的Premaster秘诀</td>
</tr>
<tr>
<td align="left">Change Cipher Spec</td>
<td align="left">更改密码规范协议以信号转换加密策略</td>
</tr>
<tr>
<td align="left">Finished</td>
<td align="left">第一条正式加密数据 （The Finished message is the first one protected with the just negotiated algorithms, keys, and secrets）</td>
</tr>
</tbody></table>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">0000   16 03 03 00 46 10 00 00 42 41 04 73 9d 45 fb 08   ....F...BA.s.E..</span><br><span class="line">0010   0b c5 61 8f 28 d8 87 02 d0 2b 96 82 4e dd 36 90   ..a.(....+..N.6.</span><br><span class="line">0020   a0 8d a6 76 28 f5 ab 5c 1b 03 2e c0 56 9e a5 a3   ...v(..\....V...</span><br><span class="line">0030   95 34 02 2a 84 15 af fb 1e 94 b9 92 0e 09 c5 4a   .4.*...........J</span><br><span class="line">0040   5c ec c1 c2 c8 51 02 d0 7f 93 5f                  \....Q...._</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">TLS body</span> </span><br><span class="line">Transport Layer Security</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Client Key Exchange</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.2 (0x0303)</span><br><span class="line">        Length: 70</span><br><span class="line">        Handshake Protocol: Client Key Exchange</span><br><span class="line">            Handshake Type: Client Key Exchange (16)</span><br><span class="line">            Length: 66</span><br><span class="line">            EC Diffie-Hellman Client Params</span><br><span class="line">                Pubkey Length: 65</span><br><span class="line">                Pubkey: 04739d45fb080bc5618f28d88702d02b96824edd3690a08d…</span><br><span class="line">    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec</span><br><span class="line">        Content Type: Change Cipher Spec (20)</span><br><span class="line">        Version: TLS 1.2 (0x0303)</span><br><span class="line">        Length: 1</span><br><span class="line">        Change Cipher Spec Message</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.2 (0x0303)</span><br><span class="line">        Length: 40</span><br><span class="line">        Handshake Protocol: Encrypted Handshake Message</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tools.ietf.org/html/rfc5246#section-7.4.1.2">RFC5246-SECTION-7.4.1.2</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>TLS</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>TLS</tag>
        <tag>HTTPS</tag>
        <tag>HTTP2</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用绘制统计图</title>
    <url>/posts/2020-05-python-count/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://matplotlib.org/">Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. </a><br><code>Matplotlib</code>是常用的数据可视化工具之一(灵活、功能强大)</p>
<p>安装包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#url 国内下载速度较慢 可以使用proxychain + 梯</span></span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install scipy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="python-绘图统计"><a href="#python-绘图统计" class="headerlink" title="python 绘图统计"></a>python 绘图统计</h1><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager</span><br><span class="line"></span><br><span class="line">x1=[<span class="number">20</span>,<span class="number">33</span>,<span class="number">51</span>,<span class="number">79</span>,<span class="number">101</span>,<span class="number">121</span>,<span class="number">132</span>,<span class="number">145</span>,<span class="number">162</span>,<span class="number">182</span>,<span class="number">203</span>,<span class="number">219</span>,<span class="number">232</span>,<span class="number">243</span>,<span class="number">256</span>,<span class="number">270</span>,<span class="number">287</span>,<span class="number">310</span>,<span class="number">325</span>]</span><br><span class="line">y1=[<span class="number">49</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">87</span>,<span class="number">106</span>,<span class="number">123</span>,<span class="number">155</span>,<span class="number">191</span>,<span class="number">233</span>,<span class="number">261</span>,<span class="number">278</span>,<span class="number">284</span>,<span class="number">297</span>,<span class="number">307</span>,<span class="number">341</span>,<span class="number">319</span>,<span class="number">341</span>]</span><br><span class="line">x2=[<span class="number">31</span>,<span class="number">52</span>,<span class="number">73</span>,<span class="number">92</span>,<span class="number">101</span>,<span class="number">112</span>,<span class="number">126</span>,<span class="number">140</span>,<span class="number">153</span>,<span class="number">175</span>,<span class="number">186</span>,<span class="number">196</span>,<span class="number">215</span>,<span class="number">230</span>,<span class="number">240</span>,<span class="number">270</span>,<span class="number">288</span>,<span class="number">300</span>]</span><br><span class="line">y2=[<span class="number">48</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">89</span>,<span class="number">162</span>,<span class="number">237</span>,<span class="number">302</span>,<span class="number">378</span>,<span class="number">443</span>,<span class="number">472</span>,<span class="number">522</span>,<span class="number">597</span>,<span class="number">628</span>,<span class="number">661</span>,<span class="number">690</span>,<span class="number">702</span>]</span><br><span class="line">x3=[<span class="number">30</span>,<span class="number">50</span>,<span class="number">70</span>,<span class="number">90</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">128</span>,<span class="number">137</span>,<span class="number">147</span>,<span class="number">159</span>,<span class="number">170</span>,<span class="number">180</span>,<span class="number">190</span>,<span class="number">200</span>,<span class="number">210</span>,<span class="number">230</span>,<span class="number">243</span>,<span class="number">259</span>,<span class="number">284</span>,<span class="number">297</span>,<span class="number">311</span>]</span><br><span class="line">y3=[<span class="number">48</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">66</span>,<span class="number">173</span>,<span class="number">351</span>,<span class="number">472</span>,<span class="number">586</span>,<span class="number">712</span>,<span class="number">804</span>,<span class="number">899</span>,<span class="number">994</span>,<span class="number">1094</span>,<span class="number">1198</span>,<span class="number">1360</span>,<span class="number">1458</span>,<span class="number">1578</span>,<span class="number">1734</span>,<span class="number">1797</span>,<span class="number">1892</span>]</span><br><span class="line"></span><br><span class="line">l1=plt.plot(x1,y1,<span class="string">&#x27;r--&#x27;</span>,label=<span class="string">&#x27;type1&#x27;</span>)</span><br><span class="line">l2=plt.plot(x2,y2,<span class="string">&#x27;g--&#x27;</span>,label=<span class="string">&#x27;type2&#x27;</span>)</span><br><span class="line">l3=plt.plot(x3,y3,<span class="string">&#x27;b--&#x27;</span>,label=<span class="string">&#x27;type3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x1,y1,<span class="string">&#x27;ro-&#x27;</span>,x2,y2,<span class="string">&#x27;g+-&#x27;</span>,x3,y3,<span class="string">&#x27;b^-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;X-Y-Z&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;row&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;column&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<h3 id="python-拟合"><a href="#python-拟合" class="headerlink" title="python 拟合"></a>python 拟合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">17</span>, <span class="number">1</span>)</span><br><span class="line">y = np.array([<span class="number">4.00</span>, <span class="number">6.40</span>, <span class="number">8.00</span>, <span class="number">8.80</span>, <span class="number">9.22</span>, <span class="number">9.50</span>, <span class="number">9.70</span>, <span class="number">9.86</span>, <span class="number">10.00</span>, <span class="number">10.20</span>, <span class="number">10.32</span>, <span class="number">10.42</span>, <span class="number">10.50</span>, <span class="number">10.55</span>, <span class="number">10.58</span>, <span class="number">10.60</span>])</span><br><span class="line">z1 = np.polyfit(x, y, <span class="number">4</span>) <span class="comment"># 用4次多项式拟合</span></span><br><span class="line">p1 = np.poly1d(z1)</span><br><span class="line"><span class="built_in">print</span>(p1) <span class="comment">#print log </span></span><br><span class="line">yvals=p1(x) <span class="comment"># 也可以使用yvals=np.polyval(z1,x)</span></span><br><span class="line">plot1=plt.plot(x, y, <span class="string">&#x27;*&#x27;</span>,label=<span class="string">&#x27;original values&#x27;</span>)</span><br><span class="line">plot2=plt.plot(x, yvals, <span class="string">&#x27;r&#x27;</span>,label=<span class="string">&#x27;polyfit values&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x axis&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y axis&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="number">4</span>) <span class="comment">#</span></span><br><span class="line">plt.title(<span class="string">&#x27;polyfitting&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="傅立叶变换"><a href="#傅立叶变换" class="headerlink" title="傅立叶变换"></a>傅立叶变换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> fftpack,signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">b = <span class="number">30</span></span><br><span class="line">f_s = <span class="number">80</span></span><br><span class="line">N = <span class="number">8000</span></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">10</span>, N, endpoint=<span class="literal">False</span>)</span><br><span class="line">sq = signal.square(<span class="number">2</span> * np.pi * <span class="number">5</span> * t)</span><br><span class="line"></span><br><span class="line">F = fftpack.fft(sq)</span><br><span class="line">f = fftpack.fftfreq(N, <span class="number">1.0</span>/f_s)</span><br><span class="line"></span><br><span class="line">F_filtered = F * (<span class="built_in">abs</span>(f) &lt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;F_filtered&quot;</span>, F_filtered</span><br><span class="line">ift = fftpack.ifft(F_filtered)</span><br><span class="line">mask = np.where(f &gt;= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">axes[<span class="number">0</span>].plot(t, sq)</span><br><span class="line">axes[<span class="number">0</span>].set_ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(f[mask], <span class="built_in">abs</span>(F[mask])/N, label=<span class="string">&quot;freq&quot;</span>)</span><br><span class="line">axes[<span class="number">2</span>].plot(t,ift.real, label=<span class="string">&quot;all&quot;</span>)</span><br><span class="line">axes[<span class="number">3</span>].plot(t,ift.real, label=<span class="string">&quot;zoom&quot;</span>)</span><br><span class="line">axes[<span class="number">3</span>].set_xlim(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>绘图效果<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200714163112.png" alt="images"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://liao.cpython.org/scipytutorial18/">Scipy Tutorial- 方波傅里叶分解与合成</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-plot</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建HTTP内网文件服务器-以NGINX为例</title>
    <url>/posts/2021-02-01-nginx-file-server/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>在内网建一个文件服务器，需要示意图如下：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210329185845.png"></p>
<p>实现需求，可行的组件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apache http</span><br><span class="line">tomcat&#x2F;jetty</span><br><span class="line">nginx </span><br><span class="line">.....</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为方续架构扩展（如做反向代理等）、扩展功能的丰富性和个人对组件的熟悉程度，最终选择了Nginx.</p>
<h1 id="nginx-搭建文件服务"><a href="#nginx-搭建文件服务" class="headerlink" title="nginx 搭建文件服务"></a>nginx 搭建文件服务</h1><p>这里需要使用到Nginx的<code>autoindex</code> 特性（<code>ngx_http_autoindex_module</code>  模块），以及其它几个module。由于本文涉及到Nginx的多个版本的不同feature ，建议nginx安装版本为： 1.18.0 +  ,详情参照<a href="http://nginx.org/en/CHANGES">Nginx Changes</a></p>
<h2 id="nginx-install"><a href="#nginx-install" class="headerlink" title="nginx install"></a>nginx install</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;RPMS&#x2F;nginx-1.18.0-2.el7.ngx.x86_64.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install nginx-1.18.0-2.el7.ngx.x86_64.rpm -y</span><br><span class="line"></span><br><span class="line">nginx -V</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #location &#x2F; &#123;</span><br><span class="line">    #    root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    #    index  index.html index.htm;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # file index</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;opt&#x2F;data&#x2F;hdp_dir&#x2F;;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        autoindex_format html;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件目录权限"><a href="#配置文件目录权限" class="headerlink" title="配置文件目录权限"></a>配置文件目录权限</h2><p> 设置文件目录权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R nginx:users  &#x2F;opt&#x2F;data&#x2F;hdp_dir&#x2F;</span><br><span class="line">chmow -R 775 &#x2F;opt&#x2F;data&#x2F;hdp_dir&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>nginx 重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开机启动</span><br><span class="line">systemctl enable nginx</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">systemctl restart nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XGET &quot;http:&#x2F;&#x2F;127.0.0.1:80&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>文件服务搭建完毕。如下图：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210329191803.png"></p>
</li>
</ul>
<h2 id="提升IO性能"><a href="#提升IO性能" class="headerlink" title="提升IO性能"></a>提升IO性能</h2><p>由于大并发的大文件下载，磁盘IO会最先成为瓶颈。所以这里对IO进行优化，增加<code>aio</code> 和 <code>sendfile</code> <code>tcp_nopush</code> <code>tcp_nodelay</code> 用以提升IO性能，全部配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">thread_pool default threads&#x3D;8 max_queue&#x3D;5096;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #tcp_nodelay    on;</span><br><span class="line">    sendfile_max_chunk 512k;</span><br><span class="line"></span><br><span class="line">    #keep connection keep alive</span><br><span class="line">    keepalive_timeout  300s;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">      server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        # file index</span><br><span class="line">        autoindex on;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            sendfile       on;</span><br><span class="line">            aio            threads&#x3D;default;</span><br><span class="line"></span><br><span class="line">            root &#x2F;home&#x2F;chenpx&#x2F;hdp_dir&#x2F;;</span><br><span class="line">            #index index.html;</span><br><span class="line">            charset utf-8;</span><br><span class="line"></span><br><span class="line">            autoindex on;</span><br><span class="line">            autoindex_exact_size off;</span><br><span class="line">            autoindex_format html;</span><br><span class="line">            autoindex_localtime on;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下载一个10G文件为例子，从实际测试效果对比看，磁盘的IO压力的下降了很多，如下图：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210330180829.png"></p>
<p>按照官网的<a href="https://www.nginx.com/blog/thread-pools-boost-performance-9x/">Thread Pools in NGINX Boost Performance 9x!</a>,性能可以提升9倍。<br>AIO配置说明，参照 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#aio">nginx aio </a>.</p>
<h2 id="增加文件预览"><a href="#增加文件预览" class="headerlink" title="增加文件预览"></a>增加文件预览</h2><p>实现对配置允许的文件格式后缀，文件可以打开，可以下载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    autoindex_format html;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line"></span><br><span class="line">    #file  shows   </span><br><span class="line">    if ($request_filename ~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$)&#123;</span><br><span class="line">        add_header Content-Disposition: &#39;p_w_upload;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>index.html文件冲突<br>Nginx <code>autoindex</code> 可能会遇到目录下有 index.html 文件，出现401<code>Error Object</code>问题，可以采用下面的方法解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对目录下的 index.html文件进行重命名</span><br><span class="line">find .&#x2F; -type f -name &quot;index.html&quot; -exec  mv &#123;&#125; &#123;&#125;-bak \;</span><br></pre></td></tr></table></figure>
<p>修改完成后可能需要nginx 服务。</p>
</li>
<li><p>权限控制<br>如果需要设置权限控制，可以使用<a href="http://nginx.org/en/docs/http/ngx_http_access_module.html"><code>ngx_http_access_module</code></a>, 需要用户鉴权还可用设置<a href="https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/"><code>HTTP Basic Authentication</code></a>. 对于需要多租户的场景，可以配置 Basic HTTP authentication，参考<a href="http://www.ttlsa.com/nginx/nginx-basic-http-authentication/">nginx用户认证配置（ Basic HTTP authentication</a></p>
</li>
<li><p>文件搜索<br>对于需要使用搜索功能，可以使用 <a href="https://github.com/aperezdc/ngx-fancyindex"><code>ngx-fancyindex)</code></a> 插件，实现效果如下图：<br><img src="https://perso.crans.org/besson/publis/Nginx-Fancyindex-Theme/Nginx-Fancyindex-Theme__example1.png"></p>
</li>
<li><p>传输安全<br>如果涉及敏感数据传输，建议增加TLS1.2+协议进行加密传输</p>
</li>
<li><p>为什么不用FTP实现<br>FTP不是一项安全的协议，并且具有许多安全漏洞。比如存在暴力破解、FTP反弹攻击。在加上FTP使用的端口是21，一般会被防火墙屏蔽。（yum 等repository 仓库默认使用的都是HTTP协议）</p>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://nginx.org/en/docs/http/ngx_http_autoindex_module.html#example">Module ngx_http_autoindex_module</a></li>
<li><a href="https://aiopsclub.com/nginx/nginx_static_file/">Nginx系列之nginx静态文件服务</a></li>
<li><a href="https://blog8.flyky.org/20191128/nginx-autoindex-conf/">Nginx目录列表(autoindex)配置相关以及页面美化</a></li>
<li><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install/">Nginx install</a></li>
<li><a href="https://lanjingling.github.io/2016/06/11/nginx-https-keepalived-youhua/">nginx优化——包括https、keepalive等</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>net</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Net</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>HBase2 YCSB benchmark test</title>
    <url>/posts/2021-04-11-hbase-ycsb-benchamark-test-1/</url>
    <content><![CDATA[<h1 id="测试环境说明"><a href="#测试环境说明" class="headerlink" title="测试环境说明"></a>测试环境说明</h1><hr>
<p>机器/网络 环境:</p>
<table>
<thead>
<tr>
<th align="left">-</th>
<th align="left">配置说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">物理机器配置信息</td>
<td align="left">CPU32C , 64G Memory , 3T 磁盘 （10个挂载) ,万兆网卡</td>
</tr>
<tr>
<td align="left">虚拟化</td>
<td align="left">无 (物理机器运行)</td>
</tr>
<tr>
<td align="left">网络</td>
<td align="left">万兆网卡/100G交换机</td>
</tr>
<tr>
<td align="left">机柜/机架情况</td>
<td align="left">所有节点在同机架</td>
</tr>
<tr>
<td align="left">OS 版本</td>
<td align="left">Centos 7.5</td>
</tr>
</tbody></table>
<p>软件版本:       </p>
<table>
<thead>
<tr>
<th align="left">-</th>
<th align="left">配置说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">HBase</td>
<td align="left">2.1.6-CDH3.1.5</td>
</tr>
<tr>
<td align="left">HDFS</td>
<td align="left">3.1.1-CDH3.1.5</td>
</tr>
<tr>
<td align="left">ambari</td>
<td align="left">2.7.4-CDH3.1.5</td>
</tr>
<tr>
<td align="left">JDK</td>
<td align="left">1.8_u181</td>
</tr>
<tr>
<td align="left">YCSB</td>
<td align="left">0.18.0-SNAPHOT</td>
</tr>
</tbody></table>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><hr>
<p>测试说明:</p>
<table>
<thead>
<tr>
<th align="left">-</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">目的</td>
<td align="left">测试HBase在生产环境的下的基准性能</td>
</tr>
<tr>
<td align="left">数据量</td>
<td align="left">4T（按照生产环境 预估）,1000+ Region .YCSB 一次写入1kb，4T数据约需要43亿行（4 * 1024 * 1024 * 1024 ）</td>
</tr>
</tbody></table>
<h2 id="场景设计"><a href="#场景设计" class="headerlink" title="场景设计"></a>场景设计</h2><table>
<thead>
<tr>
<th align="left">场景</th>
<th align="left">ycsb workload name</th>
<th align="left">desc</th>
<th align="left">分布</th>
</tr>
</thead>
<tbody><tr>
<td align="left">读0% / 写100%</td>
<td align="left">workload_g</td>
<td align="left">单写入场景/SYNC_WAL</td>
<td align="left">Zipfian：随机选择记录，存在热记录</td>
</tr>
<tr>
<td align="left">读20% / 写80%</td>
<td align="left">workload_h</td>
<td align="left">读少些多场景</td>
<td align="left">Zipfian：随机选择记录，存在热记录</td>
</tr>
<tr>
<td align="left">读20%/ 写80%</td>
<td align="left">workload_j</td>
<td align="left">读多写少场景</td>
<td align="left">Zipfian：随机选择记录，存在热记录</td>
</tr>
<tr>
<td align="left">读100%/写0%</td>
<td align="left">workload_m</td>
<td align="left">全读取</td>
<td align="left">Zipfian：随机选择记录，存在热记录</td>
</tr>
<tr>
<td align="left">补充测试场景-读100%/写0%</td>
<td align="left">workload_m</td>
<td align="left">全读取</td>
<td align="left">uniform：全随机选择记录，不存在热记录</td>
</tr>
</tbody></table>
<h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>YCSB 工具当前的Release版本是1.7，对应的Hbase client 版本是<code>2.0.0</code>,最新master分支的代码使用client是<code>2.3.6</code>,这里选用master分支上的最新代码自行编译和构建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;brianfrankcooper&#x2F;YCSB.git</span><br><span class="line">$ cd YCSB </span><br><span class="line"></span><br><span class="line"># build </span><br><span class="line">$ mvn -pl site.ycsb:mongodb-binding -am clean package</span><br><span class="line"></span><br><span class="line"># jar 包打包位置</span><br><span class="line">$ ll &#x2F;hbase2&#x2F;target&#x2F;ycsb-hbase2-binding-0.18.0-SNAPSHOT.tar.gz</span><br><span class="line"></span><br><span class="line">#copy </span><br><span class="line">$ cp .&#x2F;&#x2F;hbase2&#x2F;target&#x2F;ycsb-hbase2-binding-0.18.0-SNAPSHOT.tar.gz &#x2F;opt&#x2F;app</span><br><span class="line">$ cd &#x2F;opt&#x2F;app</span><br><span class="line">$ tar -zxvf ycsb-hbase2-binding-0.18.0-SNAPSHOT.tar.gz</span><br><span class="line">$ ln -s ycsb-hbase2-binding-0.18.0-SNAPSHOT ycsb-hbase2</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line">export YCSB_HOME&#x3D;&#x2F;opt&#x2F;app&#x2F;ycsb-hbase2</span><br><span class="line">export PATH&#x3D;$PATH:$YCSB_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 配置hbase config</span><br><span class="line">$ mkdir conf </span><br><span class="line"></span><br><span class="line"># 将hbase hase-site.xml文件拷贝到 conf</span><br><span class="line">$ cp &#x2F;etc&#x2F;hbase&#x2F;conf&#x2F;hbase-site.xml .&#x2F;conf</span><br></pre></td></tr></table></figure>

<h1 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h1><hr>
<h2 id="准备-测试数据"><a href="#准备-测试数据" class="headerlink" title="准备-测试数据"></a>准备-测试数据</h2><p>hbase 创建测试表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 用的机器是HDD的磁盘</span><br><span class="line"># regionNum = RegionServer * 350 </span><br><span class="line"># 我这边有3个Region</span><br><span class="line"># region后续也可以通过split 进行自动调整</span><br><span class="line">hbase(main):001:0&gt; n_splits = 1050 # HBase recommends (10 * number of regionservers)</span><br><span class="line">hbase(main):<span class="number">002</span>:<span class="number">0</span>&gt; create <span class="string">&#x27;user_table2&#x27;</span>, <span class="string">&#x27;cf&#x27;</span>, &#123;<span class="function"><span class="params">SPLITS</span> =&gt;</span> (<span class="number">1.</span>.n_splits).map &#123;|i| <span class="string">&quot;user#&#123;10000+i*(99999-10000)/n_splits&#125;&quot;</span>&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>准备写入数据:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 这一步耗时很长，我这边用了24H 多写入了</span><br><span class="line"># 使用2个客户端并行写入 42亿</span><br><span class="line"></span><br><span class="line">#insertstart <span class="number">0</span> ~ <span class="number">2100000000</span></span><br><span class="line">$ nohup  ycsb load hbase2 -P workloads/workloada -jvm-args=<span class="string">&#x27;-XX:+UseG1GC -Xms10g -Xmx20g&#x27;</span> -cp /opt/app/ycsb-<span class="number">0.17</span><span class="number">.0</span>/hbase20-binding/conf -p table=user_table2 -p columnfamily=cf -p durability=ASYNC_WAL -p insertstart=<span class="number">0</span> -p recordcount=<span class="number">2100000000</span> -p operationcount=<span class="number">2100000000</span> -threads <span class="number">64</span> -s  &gt; workloada_load_1.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp; </span><br><span class="line"></span><br><span class="line">#insertstart <span class="number">0</span> ~ <span class="number">2100000000</span> </span><br><span class="line">nohup  ycsb load hbase20 -P workloads/workloada -jvm-args=<span class="string">&#x27;-XX:+UseG1GC -Xms10g -Xmx20g&#x27;</span> -cp /opt/app/ycsb-<span class="number">0.17</span><span class="number">.0</span>/hbase20-binding/conf -p table=user_table2 -p columnfamily=cf -p durability=ASYNC_WAL -p insertstart=<span class="number">2100000000</span> -p recordcount=<span class="number">2100000000</span> -p operationcount=<span class="number">2100000000</span> -threads <span class="number">64</span> -s  &gt; workloada_load_2.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp; </span><br></pre></td></tr></table></figure>

<h2 id="执行测试场景A-读0-写100"><a href="#执行测试场景A-读0-写100" class="headerlink" title="执行测试场景A 读0%/写100%"></a>执行测试场景A <code>读0%/写100%</code></h2><p>写入数据完成，执行测试场景A：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt; workloads/workloadm</span><br><span class="line">readallfields=<span class="literal">true</span></span><br><span class="line">readproportion=<span class="number">0.00</span></span><br><span class="line">updateproportion=<span class="number">0</span></span><br><span class="line">scanproportion=<span class="number">0</span></span><br><span class="line">insertproportion=<span class="number">1.0</span></span><br><span class="line">requestdistribution=zipfian</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">$ nohup ./bin/ycsb run hbase2 -P workloads/workloadm -jvm-args=<span class="string">&#x27;-XX:+UseG1GC -Xms2g -Xmx20g&#x27;</span> -cp /opt/app/ycsb-<span class="number">0.17</span><span class="number">.0</span>/hbase20-binding/conf -p table=user_table2 -p columnfamily=cf -p recordcount=<span class="number">1000000000</span> -p operationcount=<span class="number">1000000000</span> -threads <span class="number">64</span> -s &gt; workloada_m.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#ycsb 测试结果</span><br><span class="line">[OVERALL], RunTime(ms), <span class="number">54185529</span></span><br><span class="line">[OVERALL], Throughput(ops/sec), <span class="number">36910.22376103406</span></span><br><span class="line">[TOTAL_GCS_G1_Young_Generation], Count, <span class="number">6289</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Young_Generation], Time(ms), <span class="number">87444</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Young_Generation], Time(%), <span class="number">0.1613788803279931</span></span><br><span class="line">[TOTAL_GCS_G1_Old_Generation], Count, <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Old_Generation], Time(ms), <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Old_Generation], Time(%), <span class="number">0.0</span></span><br><span class="line">[TOTAL_GCs], Count, <span class="number">6289</span></span><br><span class="line">[TOTAL_GC_TIME], Time(ms), <span class="number">87444</span></span><br><span class="line">[TOTAL_GC_TIME_%], Time(%), <span class="number">0.1613788803279931</span></span><br><span class="line">[CLEANUP], Operations, <span class="number">128</span></span><br><span class="line">[CLEANUP], AverageLatency(us), <span class="number">43.140625</span></span><br><span class="line">[CLEANUP], MinLatency(us), <span class="number">1</span></span><br><span class="line">[CLEANUP], MaxLatency(us), <span class="number">3591</span></span><br><span class="line">[CLEANUP], 95thPercentileLatency(us), <span class="number">36</span></span><br><span class="line">[CLEANUP], 99thPercentileLatency(us), <span class="number">566</span></span><br><span class="line">[INSERT], Operations, <span class="number">2000000000</span></span><br><span class="line">[INSERT], AverageLatency(us), <span class="number">1730.6711586995</span></span><br><span class="line">[INSERT], MinLatency(us), <span class="number">119</span></span><br><span class="line">[INSERT], MaxLatency(us), <span class="number">7602175</span></span><br><span class="line">[INSERT], 95thPercentileLatency(us), <span class="number">1453</span></span><br><span class="line">[INSERT], 99thPercentileLatency(us), <span class="number">4195</span></span><br><span class="line">[INSERT], Return=OK, <span class="number">2000000000</span></span><br></pre></td></tr></table></figure>

<p>测试机器负载：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521135955.png"></p>
<p>QPS 监控:<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521140105.png"></p>
<h2 id="执行测试B-读20-写80"><a href="#执行测试B-读20-写80" class="headerlink" title="执行测试B-读20%写80%"></a>执行测试B-读20%写80%</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt; workloads/workloadg</span><br><span class="line">readallfields=<span class="literal">true</span></span><br><span class="line">readproportion=<span class="number">0.20</span></span><br><span class="line">updateproportion=<span class="number">0</span></span><br><span class="line">scanproportion=<span class="number">0</span></span><br><span class="line">insertproportion=<span class="number">0.80</span></span><br><span class="line">requestdistribution=zipfian</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">$ $ nohup ./bin/ycsb load hbase2 -P workloads/workloadg -jvm-args=<span class="string">&#x27;-XX:+UseG1GC -Xms2g -Xmx20g&#x27;</span> -cp /opt/dp/ycsb-<span class="number">0.17</span><span class="number">.0</span>/hbase20-binding/conf -p table=user_table2 -p columnfamily=cf -p recordcount=<span class="number">1000000000</span> -p operationcount=<span class="number">1000000000</span> -threads <span class="number">64</span> -s &gt; workloada_g.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>YCSB 测试结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[OVERALL], RunTime(ms), <span class="number">8444494</span></span><br><span class="line">[OVERALL], Throughput(ops/sec), <span class="number">11842.035769105882</span></span><br><span class="line">[TOTAL_GCS_G1_Young_Generation], Count, <span class="number">316</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Young_Generation], Time(ms), <span class="number">4594</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Young_Generation], Time(%), <span class="number">0.05440231232327242</span></span><br><span class="line">[TOTAL_GCS_G1_Old_Generation], Count, <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Old_Generation], Time(ms), <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Old_Generation], Time(%), <span class="number">0.0</span></span><br><span class="line">[TOTAL_GCs], Count, <span class="number">316</span></span><br><span class="line">[TOTAL_GC_TIME], Time(ms), <span class="number">4594</span></span><br><span class="line">[TOTAL_GC_TIME_%], Time(%), <span class="number">0.05440231232327242</span></span><br><span class="line">[READ], Operations, <span class="number">19995388</span></span><br><span class="line">[READ], AverageLatency(us), <span class="number">23096.382339317446</span></span><br><span class="line">[READ], MinLatency(us), <span class="number">138</span></span><br><span class="line">[READ], MaxLatency(us), <span class="number">41287679</span></span><br><span class="line">[READ], 95thPercentileLatency(us), <span class="number">66879</span></span><br><span class="line">[READ], 99thPercentileLatency(us), <span class="number">218239</span></span><br><span class="line">[READ], Return=OK, <span class="number">19995388</span></span><br><span class="line">[CLEANUP], Operations, <span class="number">168</span></span><br><span class="line">[CLEANUP], AverageLatency(us), <span class="number">28.136904761904763</span></span><br><span class="line">[CLEANUP], MinLatency(us), <span class="number">0</span></span><br><span class="line">[CLEANUP], MaxLatency(us), <span class="number">2683</span></span><br><span class="line">[CLEANUP], 95thPercentileLatency(us), <span class="number">24</span></span><br><span class="line">[CLEANUP], 99thPercentileLatency(us), <span class="number">51</span></span><br><span class="line">[INSERT], Operations, <span class="number">80004612</span></span><br><span class="line">[INSERT], AverageLatency(us), <span class="number">3044.945812198927</span></span><br><span class="line">[INSERT], MinLatency(us), <span class="number">240</span></span><br><span class="line">[INSERT], MaxLatency(us), <span class="number">40861695</span></span><br><span class="line">[INSERT], 95thPercentileLatency(us), <span class="number">736</span></span><br><span class="line">[INSERT], 99thPercentileLatency(us), <span class="number">2967</span></span><br><span class="line">[INSERT], Return=OK, <span class="number">80004612</span></span><br></pre></td></tr></table></figure>

<h2 id="执行测试C-读80-写20"><a href="#执行测试C-读80-写20" class="headerlink" title="执行测试C-读80%写20%"></a>执行测试C-读80%写20%</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt; workloads/workloadh</span><br><span class="line">recordcount=<span class="number">100000000</span></span><br><span class="line">operationcount=<span class="number">100000000</span></span><br><span class="line">workload=site.ycsb.workloads.CoreWorkload</span><br><span class="line">readallfields=<span class="literal">true</span></span><br><span class="line">readproportion=<span class="number">0.8</span></span><br><span class="line">updateproportion=<span class="number">0</span></span><br><span class="line">scanproportion=<span class="number">0</span></span><br><span class="line">insertproportion=<span class="number">0.20</span></span><br><span class="line">requestdistribution=zipfian</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ nohup ./bin/ycsb run hbase2 -P workloads/workloadh -jvm-args=<span class="string">&#x27;-XX:+UseG1GC -Xms10g -Xmx10g &#x27;</span> -cp /opt/dp/ycsb-hbase2/conf -p table=user_table2 -p columnfamily=cf -p recordcount=<span class="number">100000000</span> -p operationcount=<span class="number">100000000</span> -threads <span class="number">84</span> -s &gt; workload_h_log.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[OVERALL], RunTime(ms), <span class="number">1622208</span></span><br><span class="line">[OVERALL], Throughput(ops/sec), <span class="number">6164.437606028327</span></span><br><span class="line">[TOTAL_GCS_G1_Young_Generation], Count, <span class="number">34</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Young_Generation], Time(ms), <span class="number">582</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Young_Generation], Time(%), <span class="number">0.03587702686708486</span></span><br><span class="line">[TOTAL_GCS_G1_Old_Generation], Count, <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Old_Generation], Time(ms), <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Old_Generation], Time(%), <span class="number">0.0</span></span><br><span class="line">[TOTAL_GCs], Count, <span class="number">34</span></span><br><span class="line">[TOTAL_GC_TIME], Time(ms), <span class="number">582</span></span><br><span class="line">[TOTAL_GC_TIME_%], Time(%), <span class="number">0.03587702686708486</span></span><br><span class="line">[READ], Operations, <span class="number">7999801</span></span><br><span class="line">[READ], AverageLatency(us), <span class="number">16489.358773674496</span></span><br><span class="line">[READ], MinLatency(us), <span class="number">120</span></span><br><span class="line">[READ], MaxLatency(us), <span class="number">18448383</span></span><br><span class="line">[READ], 95thPercentileLatency(us), <span class="number">61855</span></span><br><span class="line">[READ], 99thPercentileLatency(us), <span class="number">222207</span></span><br><span class="line">[READ], Return=OK, <span class="number">7999801</span></span><br><span class="line">[CLEANUP], Operations, <span class="number">168</span></span><br><span class="line">[CLEANUP], AverageLatency(us), <span class="number">22.125</span></span><br><span class="line">[CLEANUP], MinLatency(us), <span class="number">1</span></span><br><span class="line">[CLEANUP], MaxLatency(us), <span class="number">2257</span></span><br><span class="line">[CLEANUP], 95thPercentileLatency(us), <span class="number">12</span></span><br><span class="line">[CLEANUP], 99thPercentileLatency(us), <span class="number">71</span></span><br><span class="line">[INSERT], Operations, <span class="number">2000199</span></span><br><span class="line">[INSERT], AverageLatency(us), <span class="number">1431.605406762027</span></span><br><span class="line">[INSERT], MinLatency(us), <span class="number">241</span></span><br><span class="line">[INSERT], MaxLatency(us), <span class="number">18120703</span></span><br><span class="line">[INSERT], 95thPercentileLatency(us), <span class="number">542</span></span><br><span class="line">[INSERT], 99thPercentileLatency(us), <span class="number">4099</span></span><br><span class="line">[INSERT], Return=OK, <span class="number">2000199</span></span><br></pre></td></tr></table></figure>


<h2 id="测试场景D-读100-写0"><a href="#测试场景D-读100-写0" class="headerlink" title="测试场景D - 读100% / 写0%"></a>测试场景D - 读100% / 写0%</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ cat &gt;&gt; EOF &gt; workloads&#x2F;workloadj</span><br><span class="line">recordcount&#x3D;100000000</span><br><span class="line">operationcount&#x3D;100000000</span><br><span class="line">workload&#x3D;site.ycsb.workloads.CoreWorkload</span><br><span class="line">readallfields&#x3D;true</span><br><span class="line">readproportion&#x3D;1.0</span><br><span class="line">updateproportion&#x3D;0.0</span><br><span class="line">scanproportion&#x3D;0.0</span><br><span class="line">insertproportion&#x3D;0.0</span><br><span class="line">requestdistribution&#x3D;zipfian</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">$ nohup .&#x2F;bin&#x2F;ycsb run hbase2 -P workloads&#x2F;workloadj -jvm-args&#x3D;&#39;-XX:+UseG1GC -Xms10g -Xmx10g &#39;  -cp &#x2F;opt&#x2F;dp&#x2F;ycsb-hbase2&#x2F;conf -p table&#x3D;user_table2 -p columnfamily&#x3D;cf  -p recordcount&#x3D;100000000 -p operationcount&#x3D;100000000 -threads 84 -s &gt; workload_j.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[OVERALL], RunTime(ms), <span class="number">31251027</span></span><br><span class="line">[OVERALL], Throughput(ops/sec), <span class="number">3199.8948386560223</span></span><br><span class="line">[TOTAL_GCS_G1_Young_Generation], Count, <span class="number">307</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Young_Generation], Time(ms), <span class="number">4354</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Young_Generation], Time(%), <span class="number">0.013932342127508322</span></span><br><span class="line">[TOTAL_GCS_G1_Old_Generation], Count, <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Old_Generation], Time(ms), <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Old_Generation], Time(%), <span class="number">0.0</span></span><br><span class="line">[TOTAL_GCs], Count, <span class="number">307</span></span><br><span class="line">[TOTAL_GC_TIME], Time(ms), <span class="number">4354</span></span><br><span class="line">[TOTAL_GC_TIME_%], Time(%), <span class="number">0.013932342127508322</span></span><br><span class="line">[READ], Operations, <span class="number">100000000</span></span><br><span class="line">[READ], AverageLatency(us), <span class="number">26169.73705328</span></span><br><span class="line">[READ], MinLatency(us), <span class="number">105</span></span><br><span class="line">[READ], MaxLatency(us), <span class="number">46170111</span></span><br><span class="line">[READ], 95thPercentileLatency(us), <span class="number">55967</span></span><br><span class="line">[READ], 99thPercentileLatency(us), <span class="number">208895</span></span><br><span class="line">[READ], Return=OK, <span class="number">100000000</span></span><br><span class="line">[CLEANUP], Operations, <span class="number">168</span></span><br><span class="line">[CLEANUP], AverageLatency(us), <span class="number">22.458333333333332</span></span><br><span class="line">[CLEANUP], MinLatency(us), <span class="number">1</span></span><br><span class="line">[CLEANUP], MaxLatency(us), <span class="number">2121</span></span><br><span class="line">[CLEANUP], 95thPercentileLatency(us), <span class="number">16</span></span><br><span class="line">[CLEANUP], 99thPercentileLatency(us), <span class="number">57</span></span><br></pre></td></tr></table></figure>

<h3 id="测试场景E-uniform-读100-写0"><a href="#测试场景E-uniform-读100-写0" class="headerlink" title="测试场景E-uniform 读100%/写0%"></a>测试场景E-uniform 读100%/写0%</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt; workloads&#x2F;workloadj_uniform</span><br><span class="line">recordcount&#x3D;100000000</span><br><span class="line">operationcount&#x3D;100000000</span><br><span class="line">workload&#x3D;site.ycsb.workloads.CoreWorkload</span><br><span class="line">readallfields&#x3D;true</span><br><span class="line">readproportion&#x3D;1.0</span><br><span class="line">updateproportion&#x3D;0.0</span><br><span class="line">scanproportion&#x3D;0.0</span><br><span class="line">insertproportion&#x3D;0.0</span><br><span class="line">requestdistribution&#x3D;uniform</span><br><span class="line">EOF </span><br><span class="line"></span><br><span class="line">$ nohup .&#x2F;bin&#x2F;ycsb run hbase2 -P workloads&#x2F;workloadj_uniform -jvm-args&#x3D;&#39;-XX:+UseG1GC -Xms10g -Xmx10g &#39;  -cp &#x2F;opt&#x2F;dp&#x2F;ycsb-hbase2&#x2F;conf -p table&#x3D;user_table2 -p columnfamily&#x3D;cf  -p recordcount&#x3D;10000000 -p operationcount&#x3D;10000000 -threads 84 -s &gt; workload_uniform.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[OVERALL], RunTime(ms), <span class="number">10907660</span></span><br><span class="line">[OVERALL], Throughput(ops/sec), <span class="number">916.7869185508166</span></span><br><span class="line">[TOTAL_GCS_G1_Young_Generation], Count, <span class="number">34</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Young_Generation], Time(ms), <span class="number">577</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Young_Generation], Time(%), <span class="number">0.005289860520038212</span></span><br><span class="line">[TOTAL_GCS_G1_Old_Generation], Count, <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_G1_Old_Generation], Time(ms), <span class="number">0</span></span><br><span class="line">[TOTAL_GC_TIME_%_G1_Old_Generation], Time(%), <span class="number">0.0</span></span><br><span class="line">[TOTAL_GCs], Count, <span class="number">34</span></span><br><span class="line">[TOTAL_GC_TIME], Time(ms), <span class="number">577</span></span><br><span class="line">[TOTAL_GC_TIME_%], Time(%), <span class="number">0.005289860520038212</span></span><br><span class="line">[READ], Operations, <span class="number">10000000</span></span><br><span class="line">[READ], AverageLatency(us), <span class="number">91175.9869907</span></span><br><span class="line">[READ], MinLatency(us), <span class="number">160</span></span><br><span class="line">[READ], MaxLatency(us), <span class="number">18235391</span></span><br><span class="line">[READ], 95thPercentileLatency(us), <span class="number">138495</span></span><br><span class="line">[READ], 99thPercentileLatency(us), <span class="number">560127</span></span><br><span class="line">[READ], Return=OK, <span class="number">10000000</span></span><br><span class="line">[CLEANUP], Operations, <span class="number">168</span></span><br><span class="line">[CLEANUP], AverageLatency(us), <span class="number">22.44047619047619</span></span><br><span class="line">[CLEANUP], MinLatency(us), <span class="number">1</span></span><br><span class="line">[CLEANUP], MaxLatency(us), <span class="number">2099</span></span><br><span class="line">[CLEANUP], 95thPercentileLatency(us), <span class="number">20</span></span><br><span class="line">[CLEANUP], 99thPercentileLatency(us), <span class="number">69</span></span><br></pre></td></tr></table></figure>

<h1 id="测试数据汇总"><a href="#测试数据汇总" class="headerlink" title="测试数据汇总"></a>测试数据汇总</h1><hr>
<p> 测试结果-汇总表：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521140743.png"></p>
<p><br> 图表表示(不包含 uniform分布)：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521140842.png"></p>
<h2 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h2><ul>
<li>从上图可以看出 HBase的GET 读操作是主要的性能瓶颈，主要是收到<code>BlockCache Hit </code>Ratio和<code>Disk IOPS</code> 的影响：</li>
</ul>
<p>RegionServer Hit Ratio :<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521142441.png"><br>一个机器的最大内存是64G，分配给RegionServer 的BlockCache L1 总量是12G，集群RegionServer L1 Cache总共35G(12G * 3节点), 能够缓存的数据量有限。<br>测试中 GET RPC 的BlockCache Hit Ratio 一直在50%左右（和生产环境接近)，还有50% 的 RPC 请求需要到HDFS存储中访问数据(需要读磁盘），导致latency较大，成为限制QPS提升的瓶颈。</p>
<p>关于Disk IO ，磁盘最大OPS：<code>1K OPS</code>左右,如图：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521145029.png"><br>机器最大IOPS： 机器有10个挂载，单个HDD盘的读写 <code>150IOPS</code>左右，所以<code>10挂载 * 150 IOPS = 1.5K OPS</code>,从监控看磁盘OPS基本已经达到上限。</p>
<ul>
<li>相对与zipfian分布的测试，uniform分布下，Hbase 读取性能还要下降2/3 。<br>这是由于zipfian分布下存在热数据,<code>YCSB paper</code> 中zipfian与uniform对比见:<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521144127.png"></li>
</ul>
<p>*注意：图片涞源,<a href="https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark/">https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark/</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在机器环境不变的情况下，通过提前表的StoreFileSize,可以有效提高表的吞吐量：</p>
<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210521144838.png"><br>*图片涞源：Surbhi Kochhar,<a href="https://blog.cloudera.com/hbase-performance-testing-using-ycsb/">https://blog.cloudera.com/hbase-performance-testing-using-ycsb/</a><br>这个图展示了：缓存命中率接近99％(40G数据，cache 命中率100%），并且大多数工作负载数据在缓存中可用，因此延迟要低得多。相比之下，对于1TB数据集，由于必须从HDFS存储访问HFile数据，因此缓存命中率约为85％。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><hr>
<ul>
<li><p>YCSB project<br><a href="https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark/">https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark/</a></p>
</li>
<li><p>hbase-performance-testing-using-ycsb<br><a href="https://blog.cloudera.com/hbase-performance-testing-using-ycsb/">https://blog.cloudera.com/hbase-performance-testing-using-ycsb/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>HBase</tag>
        <tag>YCSB</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeppelin In Action</title>
    <url>/posts/2021-04-22-zeppelin-inaction-1/</url>
    <content><![CDATA[<h1 id="About-Zeppelin"><a href="#About-Zeppelin" class="headerlink" title="About Zeppelin"></a>About Zeppelin</h1><p>基于Web的笔记本，可通过SQL，Scala等实现数据驱动的交互式数据分析和协作文档。</p>
<blockquote>
<p>Web-based notebook that enables data-driven,<br>interactive data analytics and collaborative documents with SQL, Scala and more.</p>
</blockquote>
<p>Architecture<br><img src="http://zeppelin.apache.org/docs/0.9.0-preview1/assets/themes/zeppelin/img/docs-img/submarine-architecture.png"><br><em>图片@apache zeppelin</em></p>
<p><img src="http://zeppelin.apache.org/docs/0.9.0-preview1/assets/themes/zeppelin/img/docs-img/submarine-interpreter.png"><br><em>图片@apache zeppelin</em></p>
<h1 id="Install-and-config"><a href="#Install-and-config" class="headerlink" title="Install and config"></a>Install and config</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环境：</span><br><span class="line">Centos 7.5</span><br><span class="line">JDK1.8</span><br><span class="line">zeppelin-0.9.0</span><br><span class="line">网络：局域网使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>install 过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;apache&#x2F;zeppelin&#x2F;zeppelin-0.9.0&#x2F;zeppelin-0.9.0-bin-all.tgz </span><br><span class="line"># https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;zeppelin&#x2F;zeppelin-0.9.0&#x2F;zeppelin-0.9.0-bin-all.tgz </span><br><span class="line"></span><br><span class="line">tar zxvf zeppelin-0.9.0-bin-all.tgz</span><br><span class="line"></span><br><span class="line">#软链</span><br><span class="line">ln -s zeppelin-0.9.0-bin-all zeppeline</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">cd zeppline </span><br><span class="line"></span><br><span class="line"># 修改配置</span><br><span class="line">cat&lt;&lt; EOF&gt; conf&#x2F;zeppelin-site.xml</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;zeppelin.server.addr&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;0.0.0.0&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;Server binding address&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;zeppelin.server.port&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;8089&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;Server port.&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># start zeppline </span><br><span class="line">.&#x2F;bin&#x2F;zeppelin-daemon.sh start </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="配置一个interpreter"><a href="#配置一个interpreter" class="headerlink" title="配置一个interpreter"></a>配置一个interpreter</h1><p>备注：建议增加一个内网的maven 私服 repostory 地址，便于jar依赖下载</p>
<p>interperter增加 interpreter<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210425115420.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default.url: 	jdbc:mysql:&#x2F;&#x2F;172.17.8.85:3306&#x2F;</span><br><span class="line">default.user	root	</span><br><span class="line">default.password	***	 </span><br><span class="line">default.driver	com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dependencies:</span><br><span class="line">mysql:mysql-connector-java:5.1.49	</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210425120338.png"></p>
<ul>
<li>interpreter 命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#nstall all community managed interpreters</span><br><span class="line">.&#x2F;bin&#x2F;install-interpreter.sh --all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># You can get full list of community managed interpreters by running</span><br><span class="line">.&#x2F;bin&#x2F;install-interpreter.sh --list</span><br><span class="line"></span><br><span class="line"># add 第三方 interpreter </span><br><span class="line">#rd party interpreters</span><br><span class="line">#http:&#x2F;&#x2F;zeppelin.apache.org&#x2F;docs&#x2F;0.9.0&#x2F;usage&#x2F;interpreter&#x2F;installation.html#3rd-party-interpreters</span><br><span class="line">   </span><br></pre></td></tr></table></figure>


<h1 id="zeppline-进行数据可视化分析"><a href="#zeppline-进行数据可视化分析" class="headerlink" title="zeppline 进行数据可视化分析"></a>zeppline 进行数据可视化分析</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%mysql </span><br><span class="line">select tab2.user_name,count(*) as auth_obj_num from  tb_dp_hero_auth_info as tab1 left join tb_dp_hero_user_info tab2 on tab1.user_id &#x3D; tab2.id  group by tab1.user_id ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分析用户的授权对象个数：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20210425143319.png"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://zeppelin.apache.org/docs/0.9.0/usage/interpreter/installation.html">zeppelin interpreter</a><br><a href="http://zeppelin.apache.org/docs/0.9.0-preview1/interpreter/submarine.html#architecture">zeppelin architecture</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>ApacheZeppelin</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 设置时间</title>
    <url>/posts/centos-ntp/</url>
    <content><![CDATA[<p>Centos7 使用NTP Pool 服务校验时间。</p>
<span id="more"></span>

<h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看时区设置 默认是 America&#x2F;NewYork</span><br><span class="line">$ timedatectl</span><br><span class="line"></span><br><span class="line"># 查看所有 支持的时区名</span><br><span class="line">$ timedatectl list-timezones</span><br><span class="line"></span><br><span class="line"># 设置 将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间</span><br><span class="line">$ timedatectl set-local-rtc 1</span><br><span class="line"></span><br><span class="line"># 设置系统时区为HongKong</span><br><span class="line">timedatectl set-timezone Asia&#x2F;Hong_Kong</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="校准时间"><a href="#校准时间" class="headerlink" title="校准时间"></a>校准时间</h3><p>ntp校准时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#install ntp</span><br><span class="line">$ sudo yum install ntp -y</span><br><span class="line"></span><br><span class="line">#设置ntp server,NIST Internet Time Servers , NTP Pool Project</span><br><span class="line">$ sudo ntpdate time.nist.gov</span><br><span class="line"></span><br><span class="line">#或者 asia.pool.ntp.org 延迟 0.05ms 左右，推荐使用</span><br><span class="line">$ sudo ntpdate asia.pool.ntp.org</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>推荐使用 NTP Pool Project,部分节点使用GPS信号来设置时间，准确度很高。<br>链接：<a href="https://www.ntppool.org/">https://www.ntppool.org</a></p>
<p>PS：<br>NTP 漏洞问题：<br><a href="https://www.securityfocus.com/bid/94452">https://www.securityfocus.com/bid/94452</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>Centos</tag>
        <tag>NTP</tag>
      </tags>
  </entry>
  <entry>
    <title>在线数据服务网关实践经验总结</title>
    <url>/posts/grpc-gateway/</url>
    <content><![CDATA[<p>在线数据服务网关实践经验分享,一种NIO高性能的存储层网关,高性能统一在线数据平台实践</p>
<span id="more"></span>

<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>实现一个统一在线数据服务，提供对在线数据(目前主要是保存在 HBase，后面再考虑其他存储)的读写功能。支持多语言接入、负载均衡、横向扩展、权限控制、流量(频率)控制、日志审计等功能。</p>
<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/img_20_img_ods_20200519105652.png" alt="image"></p>
<h1 id="技术方案设计"><a href="#技术方案设计" class="headerlink" title="技术方案设计"></a>技术方案设计</h1><h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><p>按业务数据流及需求，将整个系统划分为网络层、业务接入层、业务服务层、数据存储层。除网络层外，其它层用微服务的方式开发各层的组件。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/img_20_20200519110709.png" alt="image"></p>
<h3 id="RPC框架选择"><a href="#RPC框架选择" class="headerlink" title="RPC框架选择"></a>RPC框架选择</h3><p>综合对比<code>gRPC</code> <code>thrift</code> <code>RESTful</code>在扩展性、跨语言兼容、性能、序列化大小等方面进行比对</p>
<table>
<thead>
<tr>
<th align="left">参考指标</th>
<th align="left">gRPC(protobuf)</th>
<th align="left">thrift</th>
<th align="left">REST</th>
</tr>
</thead>
<tbody><tr>
<td align="left">开发语言</td>
<td align="left">跨语言</td>
<td align="left">跨语言</td>
<td align="left">跨语言</td>
</tr>
<tr>
<td align="left">分布式(服务治理)</td>
<td align="left">×（自己集成service mesh,spring cloud)</td>
<td align="left">× （自己集成service mesh,spring cloud)</td>
<td align="left">√ （spring cloud）</td>
</tr>
<tr>
<td align="left">多序列化框架支持</td>
<td align="left">(只支持protobuf)</td>
<td align="left">× (thrift格式)</td>
<td align="left">× （json)</td>
</tr>
<tr>
<td align="left">多种注册中心</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">√</td>
</tr>
<tr>
<td align="left">管理中心</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">x</td>
</tr>
<tr>
<td align="left">跨编程语言</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
</tr>
<tr>
<td align="left">性能（吞吐）</td>
<td align="left">√(官方banchmark c++ 单核平均 7w QPS)</td>
<td align="left">√(与gRPC 相差不大，未找到官方资料)</td>
<td align="left">x (     restful使用的 http1.1协议，性能会比http2差1/2 )</td>
</tr>
<tr>
<td align="left">底层通信协议(应用层)兼容性</td>
<td align="left">√(http2)</td>
<td align="left">x(socket)</td>
<td align="left">√ (通常http1.1)</td>
</tr>
</tbody></table>
<p>综合比对，选择gRPC 作为RPC框架。</p>
<table>
<thead>
<tr>
<th align="left">参考指标</th>
<th align="left">gRPC</th>
<th align="left">thrift</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">性能指标</td>
<td align="left">XXXX</td>
<td align="left">XXXX</td>
<td align="left">在性能上thrift耗时&lt;  gRPC 耗时,差距在 0.84s/ 1wQPS,基本可以忽略</td>
</tr>
<tr>
<td align="left">成熟度和应用广度</td>
<td align="left">XXXX</td>
<td align="left">XXX</td>
<td align="left">gRPC 社区和版本更新上好于thrift,并且google facebook等内部都在用</td>
</tr>
<tr>
<td align="left">服务治理</td>
<td align="left">XXXX</td>
<td align="left">XXXX</td>
<td align="left">使用 haproxy 4层代理转发</td>
</tr>
<tr>
<td align="left">通信</td>
<td align="left">XXXX</td>
<td align="left">XXX</td>
<td align="left">https2 全双工，由于thrift 通过socket + TFramedTransport的传输方式</td>
</tr>
<tr>
<td align="left">异步/非阻塞</td>
<td align="left">XXXX</td>
<td align="left">XXX</td>
<td align="left">grp 使用了基于channel 的异步非阻塞NIO ,thrift TFramedTransport python等未能支持异步</td>
</tr>
</tbody></table>
<h3 id="确定软件模块划分"><a href="#确定软件模块划分" class="headerlink" title="确定软件模块划分"></a>确定软件模块划分</h3><p>将整个系统划分为 <code>Gateway</code>,<code>Read Service</code>,<code>Write Service</code>以及周边服务等。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/img_20_20200519110047.png" alt="image"></p>
<h3 id="用户Portal交互设计"><a href="#用户Portal交互设计" class="headerlink" title="用户Portal交互设计"></a>用户Portal交互设计</h3><p>给用户提供一个可以进行小量数据查询、下载的Portal web，以替代使用不便的hbase shell<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713194645.png" alt="image"></p>
<h3 id="iPortal控制台的设计"><a href="#iPortal控制台的设计" class="headerlink" title="iPortal控制台的设计"></a>iPortal控制台的设计</h3><p>iPortal控制台需要实现对用户授权（表权限、API、频次限制)、停止授权、查看用户调用报表等功能。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713201819.png" alt="image"></p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="接入层及gateway-service功能实现"><a href="#接入层及gateway-service功能实现" class="headerlink" title="接入层及gateway-service功能实现"></a>接入层及gateway-service功能实现</h3><h4 id="接入层的高可用、横向扩展"><a href="#接入层的高可用、横向扩展" class="headerlink" title="接入层的高可用、横向扩展"></a>接入层的高可用、横向扩展</h4><p>使用keepalived + haproxy 实现高可用和负载均衡。（后期由于运维规划，统一使用nginx stream做tcp4层代理)<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713192549.png" alt="image"></p>
<h4 id="用户表级别限流"><a href="#用户表级别限流" class="headerlink" title="用户表级别限流"></a>用户表级别限流</h4><p>底层存储每个库以及表数据容量、机器配置等差一，为保证系统的可用性必须对用户的请求进行限流。<br>根据不同账号的对表的不同操作进行限流，以username + request_table + request_optation 作为key设计令牌桶，可实现按分钟/按秒进行平滑限流。</p>
<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713192114.png" alt="image"></p>
<h4 id="服务发现与负载均衡"><a href="#服务发现与负载均衡" class="headerlink" title="服务发现与负载均衡"></a>服务发现与负载均衡</h4><p>综合比对了eureka,envovy方式后，基于易用性和团队技术储备选择了使用<code>eureka</code>。并结合极光自研发的微服务管理平台可以实现对服务的自动监控、告警、节点平滑上下线等功能。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713192905.png" alt="image"></p>
<p>gateway进行请求转发的过程示意图：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713195602.png" alt="image"></p>
<h4 id="服务熔断与降级"><a href="#服务熔断与降级" class="headerlink" title="服务熔断与降级"></a>服务熔断与降级</h4><p>底层存储故障、后端服务节点遇到异常时无法立即恢复，此时将请求发给后端节点已经没有意义，对于这类场景使用Hystrix进行熔断降级处理，对于异常节点直接进行平滑下线从eureka注册中心下线。</p>
<h2 id="数据业务层的功能实现"><a href="#数据业务层的功能实现" class="headerlink" title="数据业务层的功能实现"></a>数据业务层的功能实现</h2><h3 id="读写分离实现"><a href="#读写分离实现" class="headerlink" title="读写分离实现"></a>读写分离实现</h3><p>对于大流量的业务，使用Kafka MQ读写分离提高性能、平滑峰值。<br>读写分离设计示意图：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713210750.png" alt="image"></p>
<p> 数据写入过程：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713205115.png" alt="image"></p>
<h2 id="存储层Hbase主备切换"><a href="#存储层Hbase主备切换" class="headerlink" title="存储层Hbase主备切换"></a>存储层Hbase主备切换</h2><p>Hbase异常会出现大量查询超时和相应的Error，当失败达到一定阈值需要进行Hbase主备库切换。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713214008.png" alt="image"><br>同时也需要支持手动切换HBase，对于手动切换，采用通过修改apollo 配置中心的对应的配置实现集群的手动切换：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713214629.png" alt="image"></p>
<h2 id="日志审计和统计和报表功能实现"><a href="#日志审计和统计和报表功能实现" class="headerlink" title="日志审计和统计和报表功能实现"></a>日志审计和统计和报表功能实现</h2><p>在<code>gateway-service</code>层增加<code>logInterceptor</code>实现对用户的请求的进站和出站数据的记录，利用ELK来实现整个系统的日志收集和搜索。<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713215643.png" alt="image"></p>
<p>使用Kibana进行日志查询：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713220032.png" alt="image"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在接入层使用负载均衡，在服务层通过微服务的架构方式方式保证整个架构的高可用和可伸缩性，对于gateway-service、HBase-service、writer等微服务使用全异步处理的方式提高了单个节点的性能，减小各节点对于整体耗时的影响。<br>各节点的最大QPS负载：</p>
<table>
<thead>
<tr>
<th align="left">组件</th>
<th align="left">单节点(8C16G)测试实际QPS</th>
<th align="left">GC状况</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gateway</td>
<td align="left">15K</td>
<td align="left">当流量上升到12K+ 每分钟GC次数&gt;20 ,每分钟GC总耗时&gt;5s 需要优化</td>
</tr>
<tr>
<td align="left">writer-pre</td>
<td align="left">33K+</td>
<td align="left">当流量上升到33K+ 每分钟GC次数&gt;4,每分钟GC总耗时&gt;0.05s 正常</td>
</tr>
<tr>
<td align="left">writer</td>
<td align="left">20K+</td>
<td align="left">当流量上升到20K+ 每分钟GC次数&gt;14 ,每分钟GC总耗时&gt;0.42s 正常</td>
</tr>
</tbody></table>
<p>线上生产环境每日流量：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200713212836.png" alt="image"></p>
<h2 id="可以继续优化"><a href="#可以继续优化" class="headerlink" title="可以继续优化"></a>可以继续优化</h2><ul>
<li>gRPC 框架自带的loadblance策略与eureka策略整合</li>
<li>gRPC支持stream模式，可以探索基于stream的转发</li>
<li>JVM预热，在高并发场景下数据流量很大，程序刚启动时会出现一些耗时较高的查询</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>-<a href="https://grpc.io/docs/guides/benchmarking/">gRPC banchmark</a></p>
<ul>
<li><a href="https://www.cnblogs.com/softidea/p/7232035.html">开源RPC（gRPC/Thrift）框架性能评测</a></li>
<li><a href="https://colobu.com/2016/09/05/benchmarks-of-popular-rpc-frameworks/">分布式RPC框架性能大比拼</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Gateway</tag>
        <tag>HighPerformance</tag>
        <tag>Concurrent</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>IEEE Code of Ethics</title>
    <url>/posts/ieee-code-of-ethics/</url>
    <content><![CDATA[<h1 id="IEEE-Code-of-Ethics"><a href="#IEEE-Code-of-Ethics" class="headerlink" title="IEEE Code of Ethics"></a>IEEE Code of Ethics</h1><p>We, the members of the IEEE, in recognition of the importance of our technologies in affecting the quality of life throughout the world, and in accepting a personal obligation to our profession, its members, and the communities we serve, do hereby commit ourselves to the highest ethical and professional conduct and agree:</p>
<ul>
<li>to hold paramount the safety, health, and welfare of the public, to strive to comply with ethical design and sustainable development practices, and to disclose promptly factors that might endanger the public or the environment;</li>
<li>to avoid real or perceived conflicts of interest whenever possible, and to disclose them to affected parties when they do exist;</li>
<li>to be honest and realistic in stating claims or estimates based on available data;</li>
<li>to reject bribery in all its forms;</li>
<li>to improve the understanding by individuals and society of the capabilities and societal implications of conventional and emerging technologies, including intelligent systems;</li>
<li>to maintain and improve our technical competence and to undertake technological tasks for others only if qualified by training or experience, or after full disclosure of pertinent limitations;</li>
<li>to seek, accept, and offer honest criticism of technical work, to acknowledge and correct errors, and to credit properly the contributions of others;</li>
<li>to treat fairly all persons and to not engage in acts of discrimination based on race, religion, gender, disability, age, national origin, sexual orientation, gender identity, or gender expression;</li>
<li>to avoid injuring others, their property, reputation, or employment by false or malicious action;</li>
<li>to assist colleagues and co-workers in their professional development and to support them in following this code of ethics.</li>
</ul>
<p>Changes to the IEEE Code of Ethics will be made only after the following conditions are met:</p>
<ul>
<li>Proposed changes shall have been published in THE INSTITUTE at least three (3) months in advance of final consideration by the Board of Directors, with a request for comment, and</li>
<li>All IEEE Major Boards shall have the opportunity to discuss proposed changes prior to final action by the Board of Directors, and</li>
<li>An affirmative vote of two-thirds of the votes of the members of the Board of Directors present at the time of the vote, provided a quorum is present, shall be required for changes to be made.</li>
</ul>
<p><strong>From IEEE</strong>: <a href="https://www.ieee.org/about/corporate/governance/p7-8.html">https://www.ieee.org</a></p>
<h1 id="Cyberspace-Independence"><a href="#Cyberspace-Independence" class="headerlink" title="Cyberspace Independence"></a>Cyberspace Independence</h1><p>A Declaration of the Independence of Cyberspace:</p>
<p>by John Perry Barlow<br>Governments of the Industrial World, you weary giants of flesh and steel, I come from Cyberspace, the new home of Mind. On behalf of the future, I ask you of the past to leave us alone. You are not welcome among us. You have no sovereignty where we gather.<br>We have no elected government, nor are we likely to have one, so I address you with no greater authority than that with which liberty itself always speaks. I declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. You have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.<br>Governments derive their just powers from the consent of the governed. You have neither solicited nor received ours. We did not invite you. You do not know us, nor do you know our world. Cyberspace does not lie within your borders. Do not think that you can build it, as though it were a public construction project. You cannot. It is an act of nature and it grows itself through our collective actions.<br>You have not engaged in our great and gathering conversation, nor did you create the wealth of our marketplaces. You do not know our culture, our ethics, or the unwritten codes that already provide our society more order than could be obtained by any of your impositions.<br>You claim there are problems among us that you need to solve. You use this claim as an excuse to invade our precincts. Many of these problems don&#39;t exist. Where there are real conflicts, where there are wrongs, we will identify them and address them by our means. We are forming our own Social Contract. This governance will arise according to the conditions of our world, not yours. Our world is different.<br>Cyberspace consists of transactions, relationships, and thought itself, arrayed like a standing wave in the web of our communications. Ours is a world that is both everywhere and nowhere, but it is not where bodies live.<br>We are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.<br>We are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.<br>Your legal concepts of property, expression, identity, movement, and context do not apply to us. They are all based on matter, and there is no matter here.<br>Our identities have no bodies, so, unlike you, we cannot obtain order by physical coercion. We believe that from ethics, enlightened self-interest, and the commonweal, our governance will emerge. Our identities may be distributed across many of your jurisdictions. The only law that all our constituent cultures would generally recognize is the Golden Rule. We hope we will be able to build our particular solutions on that basis. But we cannot accept the solutions you are attempting to impose.<br>In the United States, you have today created a law, the Telecommunications Reform Act, which repudiates your own Constitution and insults the dreams of Jefferson, Washington, Mill, Madison, DeToqueville, and Brandeis. These dreams must now be born anew in us.<br>You are terrified of your own children, since they are natives in a world where you will always be immigrants. Because you fear them, you entrust your bureaucracies with the parental responsibilities you are too cowardly to confront yourselves. In our world, all the sentiments and expressions of humanity, from the debasing to the angelic, are parts of a seamless whole, the global conversation of bits. We cannot separate the air that chokes from the air upon which wings beat.<br>In China, Germany, France, Russia, Singapore, Italy and the United States, you are trying to ward off the virus of liberty by erecting guard posts at the frontiers of Cyberspace. These may keep out the contagion for a small time, but they will not work in a world that will soon be blanketed in bit-bearing media.<br>Your increasingly obsolete information industries would perpetuate themselves by proposing laws, in America and elsewhere, that claim to own speech itself throughout the world. These laws would declare ideas to be another industrial product, no more noble than pig iron. In our world, whatever the human mind may create can be reproduced and distributed infinitely at no cost. The global conveyance of thought no longer requires your factories to accomplish.<br>These increasingly hostile and colonial measures place us in the same position as those previous lovers of freedom and self-determination who had to reject the authorities of distant, uninformed powers. We must declare our virtual selves immune to your sovereignty, even as we continue to consent to your rule over our bodies. We will spread ourselves across the Planet so that no one can arrest our thoughts.<br>We will create a civilization of the Mind in Cyberspace. May it be more humane and fair than the world your governments have made before.</p>
<p>Davos, Switzerland<br>February 8, 1996</p>
<h2 id="keynote"><a href="#keynote" class="headerlink" title="keynote"></a>keynote</h2><p>中文翻译节选：<br>赛博空间由交易、关系和思想本身构成，它们像一道永恒的波浪，在我们的交流之网上部署着。我们的世界无处不在，又无处可寻，我们的世界不是肉体存在的世界。<br>我们正在创造一个新世界，人人都可以进入这个世界，而不必考虑由种族、经济力、武力、出生地而来的特权或偏见。<br>我们正在创造一个新世界，人人、处处可以表达他或她的信仰，无论这种信仰是多么古怪，而不再害怕被强制沉默或强制一律。<br>你们关于财产、表达、身份、迁徙的法律概念及其关联对我们不适用。这些概念建立在物质的基础上，我们这里没有物质。</p>
<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p><a href="https://www.ieee.org/communities/ieee-resource-centers/find-your-ieee-resource-center.html">IEEE 资源中心</a><br><a href="https://en.wikipedia.org/wiki/Institute_of_Electrical_and_Electronics_Engineers">IEEE</a><br><a href="https://www.eff.org/cyberspace-independence">cyberspace-independence</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>values</category>
      </categories>
      <tags>
        <tag>Enginner</tag>
        <tag>IEEE</tag>
        <tag>Ethics</tag>
        <tag>Values</tag>
      </tags>
  </entry>
  <entry>
    <title>Java DNS解析问题-以Socket Client为例</title>
    <url>/posts/java-dns/</url>
    <content><![CDATA[<p>JDK 的<code>InetSocketAddress</code>被设计了为一个不可变的对象，在<code>Socket</code>等长连接使用时需要注意DNS映射关系更新问题。</p>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>最近遇到一个zookeeper-client 更新DNS映射关系未生效问题，记录一下该问题的原因。</p>
<p>域名映射关系：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">127.0.0.1 test.lan-gl-42.dev</span><br></pre></td></tr></table></figure>
<p>java应用程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dsun.net.inetaddr.ttl&#x3D;15</span><br></pre></td></tr></table></figure>
<p>Java Socket Client Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String host = <span class="string">&quot;test.lan-gl-42.dev&quot;</span>;</span><br><span class="line">       <span class="keyword">int</span> port = <span class="number">9876</span>;</span><br><span class="line">       <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream())) &#123;</span><br><span class="line">           <span class="comment">//write to socket using ObjectOutputStream</span></span><br><span class="line">           System.out.println(<span class="string">&quot;Sending request to Socket Server,socket remote:&quot;</span> + socket.getRemoteSocketAddress().toString());</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">               Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">               System.out.println(<span class="string">&quot;Sending request to Socket Server,socket remote:&quot;</span> + socket.getRemoteSocketAddress().toString());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//Thread.sleep(10000);</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException | InterruptedException  e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p> 执行日志：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Sending request to Socket Server,socket remote:test.lan-gl-42.dev&#x2F;127.0.0.1:9876</span><br><span class="line">Sending request to Socket Server,socket remote:test.lan-gl-42.dev&#x2F;127.0.0.1:9876</span><br><span class="line">Sending request to Socket Server,socket remote:test.lan-gl-42.dev&#x2F;127.0.0.1:9876</span><br></pre></td></tr></table></figure><br>修改域名的映射关系为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">10.224.17.250 test.lan-gl-42.dev</span><br></pre></td></tr></table></figure>
<p>** socket连接的地址依然是 127.0.0.1 **</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Java进程及OS DNS解析过程：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200601180658.png"><br><a href="https://medium.com/@maheshsenni/host-name-resolution-in-java-80301fea465a">图片来源</a><br>JVM会缓存DNS name lookups,它在指定的时间段内缓存IP地址，称为生存时间(time-to-live, TTL)</p>
<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200601172248.png"><br>因为<code>InetSocketAddress</code>被设计了为一个不可变的对象（immutable object ）,<code>Socket</code> 对象实例的InetSocketAddress 对象，只在实例化对象时解析hostName与hostAddress的映射关系。</p>
<h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><p>可以借鉴 zookeeper 的 <a href="https://github.com/apache/zookeeper/blob/master/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java"><code>StaticHostProvider.java</code></a><br>调用<code>next()</code>方法在解析一次域名与IP地址的映射关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InetSocketAddress <span class="title">next</span><span class="params">(<span class="keyword">long</span> spinDelay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> needToSleep = <span class="keyword">false</span>;</span><br><span class="line">        InetSocketAddress addr;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.reconfigMode) &#123;</span><br><span class="line">                addr = <span class="keyword">this</span>.nextHostInReconfigMode();</span><br><span class="line">                <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.currentIndex = <span class="keyword">this</span>.serverAddresses.indexOf(addr);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.resolve(addr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.reconfigMode = <span class="keyword">false</span>;</span><br><span class="line">                needToSleep = spinDelay &gt; <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++<span class="keyword">this</span>.currentIndex;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex == <span class="keyword">this</span>.serverAddresses.size()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.currentIndex = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addr = (InetSocketAddress)<span class="keyword">this</span>.serverAddresses.get(<span class="keyword">this</span>.currentIndex);</span><br><span class="line">            needToSleep = needToSleep || <span class="keyword">this</span>.currentIndex == <span class="keyword">this</span>.lastIndex &amp;&amp; spinDelay &gt; <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.lastIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.lastIndex = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (needToSleep) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(spinDelay);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException var7) &#123;</span><br><span class="line">                LOG.warn(<span class="string">&quot;Unexpected exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.resolve(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> InetSocketAddress <span class="title">resolve</span><span class="params">(InetSocketAddress address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String curHostString = address.getHostString();</span><br><span class="line">            List&lt;InetAddress&gt; resolvedAddresses = <span class="keyword">new</span> ArrayList(Arrays.asList(<span class="keyword">this</span>.resolver.getAllByName(curHostString)));</span><br><span class="line">            <span class="keyword">if</span> (resolvedAddresses.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> address;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Collections.shuffle(resolvedAddresses);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> InetSocketAddress((InetAddress)resolvedAddresses.get(<span class="number">0</span>), address.getPort());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException var4) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;Unable to resolve address: &#123;&#125;&quot;</span>, address.toString(), var4);</span><br><span class="line">            <span class="keyword">return</span> address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>JVM的DNS缓存时间可用通过一下参数配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#globally, for all applications that use the JVM. Set networkaddress.cache.ttl in the $JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;security&#x2F;java.security file</span><br><span class="line">networkaddress.cache.ttl</span><br><span class="line"></span><br><span class="line">#for your application only, set networkaddress.cache.ttl in your application’s initialization code:</span><br><span class="line">sun.net.inetaddr.ttl</span><br></pre></td></tr></table></figure>
<p><code>networkaddress.cache.ttl</code> 是全局参数，所有使用该JVM的程序<br><code>sun.net.inetaddr.ttl</code>  JVM应用的配置参数，一般通过 <code>-Dsun.net.inetaddr.ttl=10</code>j进行配置</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/properties.html">jdk-net-properties.html</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Net</tag>
        <tag>Java</tag>
        <tag>CoreJava</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次DNS异常导致的`ECONNREFUSED`问题</title>
    <url>/posts/nodejs-DNS-error/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><code>node.js</code> 程序出现 <code> Error: connect ECONNREFUSED</code>  和 <code>getaddrinfo ENOTFOUND</code> 。<br><code>ENOTFOUND</code> 官方定义 :  (DNS lookup failed): Indicates a DNS failure of either EAI_NODATA or EAI_NONAME. This is not a standard POSIX error.<br>这个问题一般是DNS 查询失败导致的。</p>
<p><code>ECONNREFUSED</code>: (Connection refused): No connection could be made because the target machine actively refused it. This usually results from trying to connect to a service that is inactive on the foreign host.<br>无法建立连接，因为目标计算机主动拒绝了该连接。 这通常是由于尝试连接到外部主机上处于非活动状态的服务而导致的。 (这个也可能是DNS解析的 IP地址不对，导致远程主机无法连接)</p>
<p>详细日志如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">21</span> <span class="number">11</span>:<span class="number">26</span>:<span class="number">19</span> [PicGo ERROR] RequestError: <span class="built_in">Error</span>: connect ECONNREFUSED <span class="number">13.250</span><span class="number">.168</span><span class="number">.23</span>:<span class="number">443</span></span><br><span class="line">------<span class="built_in">Error</span> Stack Begin------</span><br><span class="line">RequestError: <span class="built_in">Error</span>: connect ECONNREFUSED <span class="number">13.250</span><span class="number">.168</span><span class="number">.23</span>:<span class="number">443</span></span><br><span class="line">    at <span class="keyword">new</span> RequestError (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request-promise-core/lib/errors.js:<span class="number">14</span>:<span class="number">15</span>)</span><br><span class="line">    at Request.plumbing.callback (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request-promise-core/lib/plumbing.js:<span class="number">87</span>:<span class="number">29</span>)</span><br><span class="line">    at Request.RP$callback [<span class="keyword">as</span> _callback] (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request-promise-core/lib/plumbing.js:<span class="number">46</span>:<span class="number">31</span>)</span><br><span class="line">    at self.callback (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request/request.js:<span class="number">185</span>:<span class="number">22</span>)</span><br><span class="line">    at Request.emit (events.js:<span class="number">182</span>:<span class="number">13</span>)</span><br><span class="line">    at Request.onRequestError (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request/request.js:<span class="number">881</span>:<span class="number">8</span>)</span><br><span class="line">    at ClientRequest.emit (events.js:<span class="number">182</span>:<span class="number">13</span>)</span><br><span class="line">    at TLSSocket.socketErrorListener (_http_client.js:<span class="number">391</span>:<span class="number">9</span>)</span><br><span class="line">    at TLSSocket.emit (events.js:<span class="number">182</span>:<span class="number">13</span>)</span><br><span class="line">    at emitErrorNT (internal/streams/destroy.js:<span class="number">82</span>:<span class="number">8</span>)</span><br><span class="line">-------<span class="built_in">Error</span> Stack End-------</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">05</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">34</span>:<span class="number">22</span> [PicGo WARN] failed</span><br><span class="line"><span class="number">2020</span>-<span class="number">05</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">34</span>:<span class="number">22</span> [PicGo ERROR] RequestError: <span class="built_in">Error</span>: getaddrinfo ENOTFOUND api.github.com</span><br><span class="line">------<span class="built_in">Error</span> Stack Begin------</span><br><span class="line">RequestError: <span class="built_in">Error</span>: getaddrinfo ENOTFOUND api.github.com</span><br><span class="line">    at <span class="keyword">new</span> RequestError (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request-promise-core/lib/errors.js:<span class="number">14</span>:<span class="number">15</span>)</span><br><span class="line">    at Request.plumbing.callback (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request-promise-core/lib/plumbing.js:<span class="number">87</span>:<span class="number">29</span>)</span><br><span class="line">    at Request.RP$callback [<span class="keyword">as</span> _callback] (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request-promise-core/lib/plumbing.js:<span class="number">46</span>:<span class="number">31</span>)</span><br><span class="line">    at self.callback (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request/request.js:<span class="number">185</span>:<span class="number">22</span>)</span><br><span class="line">    at Request.emit (events.js:<span class="number">200</span>:<span class="number">13</span>)</span><br><span class="line">    at Request.onRequestError (<span class="regexp">/Applications/</span>PicGo.app/Contents/Resources/app.asar/node_modules/request/request.js:<span class="number">881</span>:<span class="number">8</span>)</span><br><span class="line">    at ClientRequest.emit (events.js:<span class="number">200</span>:<span class="number">13</span>)</span><br><span class="line">    at TLSSocket.socketErrorListener (_http_client.js:<span class="number">402</span>:<span class="number">9</span>)</span><br><span class="line">    at TLSSocket.emit (events.js:<span class="number">200</span>:<span class="number">13</span>)</span><br><span class="line">    at emitErrorNT (internal/streams/destroy.js:<span class="number">91</span>:<span class="number">8</span>)</span><br><span class="line">-------<span class="built_in">Error</span> Stack End-------</span><br></pre></td></tr></table></figure>


<h4 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h4><p>对于<code>RequestError: Error: connect ECONNREFUSED 13.250.168.23:443</code> ERROR, 可能是某个域名的IP地址，使用dig反向解析IP地址对应的域名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dig -x 13.250.168.23 +short</span><br><span class="line">api.github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用梯子代理进行解析</span></span><br><span class="line">$ proxychain4 dig -x 13.250.168.23 +short</span><br><span class="line">ec2-13-250-168-23.ap-southeast-1.compute.amazonaws.com.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#公司 设置公网DNS是： 114.114.115.115，可以从 lan 的状态上看到</span><br><span class="line">dig @114.114.115.115 api.github.com +trace</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/img_20_img_20200519094710.png" alt="image"></p>
<p>解析到的<code>13.250.168.23</code> 这个IP，实际是不可访问的,<code>ping </code>和<code>telnet </code>都不通。<br>指定DNS<code>119.29.29.29</code>进行排查:</p>
<p><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/img_20_img_20200519095335.png" alt="image"></p>
<p>修改本地<code>hosts</code> 文件，进行测试，问题修复。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo echo &quot;54.169.195.247 api.github.com&quot; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br><span class="line">#或者在 &#x2F;etc&#x2F;hosts 添加一行:54.169.195.247 api.github.com</span><br><span class="line"></span><br><span class="line">$ curl https:&#x2F;&#x2F;api.github.com</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">date: Tue, 19 May 2020 01:57:31 GMT</span><br><span class="line">content-type: application&#x2F;json; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure>

<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>DNS有问题，排查起来比较耗时间，Mianland CN , 建议使用 119.29.29.29 （ 腾讯） ， 海外用google DNS：8.8.8.8很稳妥。<br>另外家中的路由器也建议不要使用ISP提供的默认DNS，减少ISP广告的也更稳定。</p>
<h3 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h3><p>使用<code>traceroute</code> 可以进行路由跟踪，产看完成的路由表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ traceroute api.github.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="%5Bhttps://nodejs.org/api/fs.html">node.jd Document Error List</a><br><a href="https://linux.die.net/man/1/dig">dig man</a><br><a href="https://www.cnblogs.com/sparkdev/p/7777871.html">linux dig 命令</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>TCP/IP</tag>
        <tag>NODEJS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP2 TLS加密通信理解与应用</title>
    <url>/posts/2020-01-01-tls-truststores-md/</url>
    <content><![CDATA[<h2 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h2><p>一个HTTP2通信加密加密需求。</p>
<ul>
<li><p>网络场景：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200731154733.png" alt="images"></p>
</li>
<li><p>通信协议：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;2 + TLS1.3&#x2F;TLS1.2(同时支持)</span><br></pre></td></tr></table></figure></li>
<li><p>CA证书签发及TLS握手过程示意图：<br><img src="https://raw.githubusercontent.com/ordiychen/study_notes/master/res/image/node_image/blog_20200805114352.png" alt="images"></p>
</li>
</ul>
<h2 id="CA证书的签署和自签署"><a href="#CA证书的签署和自签署" class="headerlink" title="CA证书的签署和自签署"></a>CA证书的签署和自签署</h2><p>自签署一份Root-CA用于开发和测试</p>
<h3 id="TLS加密算法选择"><a href="#TLS加密算法选择" class="headerlink" title="TLS加密算法选择"></a>TLS加密算法选择</h3><p>TLS1.3支持的加密算法较少，需要提前查看兼容性：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl version</span></span><br></pre></td></tr></table></figure>
<p>result print:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">OpenSSL 1.1.1g  21 Apr 2020</span><br></pre></td></tr></table></figure>

<ul>
<li><p>筛选openssl 支持的TLS加密算法：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">openssl ciphers -v &#x27;kEECDH+ECDSA kEDH +RSA !aNULL !eNULL !LOW !3DES !DES !RC2 !RC4 !EXP !DSS !IDEA !SRP !kECDH !MD5 !SEED !PSK !CAMELLIA&#x27;</span><br></pre></td></tr></table></figure>
<p>result print:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">TLS_AES_256_GCM_SHA384  TLSv1.3 Kx=any      Au=any  Enc=AESGCM(256) Mac=AEAD</span><br><span class="line">TLS_CHACHA20_POLY1305_SHA256 TLSv1.3 Kx=any      Au=any  Enc=CHACHA20/POLY1305(256) Mac=AEAD</span><br><span class="line">TLS_AES_128_GCM_SHA256  TLSv1.3 Kx=any      Au=any  Enc=AESGCM(128) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(256) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-CHACHA20-POLY1305 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=CHACHA20/POLY1305(256) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES256-CCM8 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESCCM8(256) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES256-CCM  TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESCCM(256) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-ARIA256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=ARIAGCM(256) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(128) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES128-CCM8 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESCCM8(128) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES128-CCM  TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESCCM(128) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-ARIA128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=ARIAGCM(128) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(256)  Mac=SHA384</span><br><span class="line">ECDHE-ECDSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(128)  Mac=SHA256</span><br><span class="line">ECDHE-ECDSA-AES256-SHA  TLSv1 Kx=ECDH     Au=ECDSA Enc=AES(256)  Mac=SHA1</span><br><span class="line">ECDHE-ECDSA-AES128-SHA  TLSv1 Kx=ECDH     Au=ECDSA Enc=AES(128)  Mac=SHA1</span><br><span class="line">DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD</span><br><span class="line">DHE-RSA-CHACHA20-POLY1305 TLSv1.2 Kx=DH       Au=RSA  Enc=CHACHA20/POLY1305(256) Mac=AEAD</span><br><span class="line">DHE-RSA-AES256-CCM8     TLSv1.2 Kx=DH       Au=RSA  Enc=AESCCM8(256) Mac=AEAD</span><br><span class="line">DHE-RSA-AES256-CCM      TLSv1.2 Kx=DH       Au=RSA  Enc=AESCCM(256) Mac=AEAD</span><br><span class="line">DHE-RSA-ARIA256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=ARIAGCM(256) Mac=AEAD</span><br><span class="line">DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD</span><br><span class="line">DHE-RSA-AES128-CCM8     TLSv1.2 Kx=DH       Au=RSA  Enc=AESCCM8(128) Mac=AEAD</span><br><span class="line">DHE-RSA-AES128-CCM      TLSv1.2 Kx=DH       Au=RSA  Enc=AESCCM(128) Mac=AEAD</span><br><span class="line">DHE-RSA-ARIA128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=ARIAGCM(128) Mac=AEAD</span><br><span class="line">DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256</span><br><span class="line">DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA256</span><br><span class="line">DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1</span><br><span class="line">DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1</span><br></pre></td></tr></table></figure></li>
<li><p>名称映射关系说明：<br>OpenSSL的加密算法与IANA的映射关系，可参照<a href="https://testssl.sh/openssl-iana.mapping.html">OPENSSL-IANA.MAPPING</a>，以下是一个部分示例：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Cipher Suite	Name (OpenSSL)	KeyExch.	Encryption	Bits	Cipher Suite Name (IANA)</span><br><span class="line">[0x1301]	TLS_AES_128_GCM_SHA256	ECDH	AESGCM	128	TLS_AES_128_GCM_SHA256</span><br><span class="line">[0x1303]	TLS_CHACHA20_POLY1305_SHA256	ECDH	ChaCha20-Poly1305	256	TLS_CHACHA20_POLY1305_SHA256</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="OpenSSL-生成Root-CA-根证书"><a href="#OpenSSL-生成Root-CA-根证书" class="headerlink" title="OpenSSL 生成Root-CA 根证书"></a>OpenSSL 生成Root-CA 根证书</h3><p>生成一个长期有效的<code>Root-CA</code>用于签发其它证书。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成CA 私钥</span></span><br><span class="line"> openssl genrsa -out root-ca.key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成  CA 自签名证书,需要输入各类信息 有效期10年～～～</span></span><br><span class="line">openssl req -new -x509 -key  root-ca.key.pem -out root-ca.cert.pem -days 3650</span><br></pre></td></tr></table></figure>


<h3 id="使用Root-CA签署其它证书"><a href="#使用Root-CA签署其它证书" class="headerlink" title="使用Root-CA签署其它证书"></a>使用Root-CA签署其它证书</h3><p>因<code>TLS_CHACHA20_POLY1305_SHA256</code>使用的加密技术是<code>ECDH</code>,需要使用<code>Openssl ecparam</code>获取其支持的curves</p>
<ul>
<li><p>查看Openssl 支持的曲线生成方法：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">openssl ecparam -list_curves</span><br></pre></td></tr></table></figure>
<p>Openssl支持的曲线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secp112r1 : SECG&#x2F;WTLS curve over a 112 bit prime field</span><br><span class="line"> secp112r2 : SECG curve over a 112 bit prime field</span><br><span class="line"> secp128r1 : SECG curve over a 128 bit prime field</span><br><span class="line"> secp128r2 : SECG curve over a 128 bit prime field</span><br><span class="line"> secp160k1 : SECG curve over a 160 bit prime field</span><br><span class="line"> secp160r1 : SECG curve over a 160 bit prime field</span><br><span class="line"> secp160r2 : SECG&#x2F;WTLS curve over a 160 bit prime field</span><br><span class="line"> secp192k1 : SECG curve over a 192 bit prime field</span><br><span class="line"> secp224k1 : SECG curve over a 224 bit prime field</span><br><span class="line"> secp224r1 : NIST&#x2F;SECG curve over a 224 bit prime field</span><br><span class="line"> secp256k1 : SECG curve over a 256 bit prime field</span><br><span class="line"> secp384r1 : NIST&#x2F;SECG curve over a 384 bit prime field</span><br><span class="line"> secp521r1 : NIST&#x2F;SECG curve over a 521 bit prime field</span><br><span class="line"> prime192v1: NIST&#x2F;X9.62&#x2F;SECG curve over a 192 bit prime field</span><br><span class="line"> prime192v2: X9.62 curve over a 192 bit prime field</span><br><span class="line"> prime192v3: X9.62 curve over a 192 bit prime field</span><br><span class="line"> prime239v1: X9.62 curve over a 239 bit prime field</span><br><span class="line"> prime239v2: X9.62 curve over a 239 bit prime field</span><br><span class="line"> prime239v3: X9.62 curve over a 239 bit prime field</span><br><span class="line"> prime256v1: X9.62&#x2F;SECG curve over a 256 bit prime field</span><br><span class="line"> .....</span><br></pre></td></tr></table></figure>
<p>注：本例使用 prime256v1</p>
</li>
<li><p>生成<code>ECDH</code>密钥交换的证书</p>
</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成 ECDH 的私钥</span></span><br><span class="line">openssl ecparam -out ecparam.pem -name prime256v1</span><br><span class="line">openssl genpkey -paramfile ecparam.pem -out ecdhkey.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  生成 ECDH 的公钥（public key）</span></span><br><span class="line">openssl pkey -in ecdhkey.pem -pubout -out ecdhpubkey.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生成 CSR（Certificate Request）文件，CSR 是需要自签名的，不能使用 ECDH 算法，因为 ECDH 不是签名算法，本例使用RSA算法生成。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa  -out rsakey.pem 4096</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要输入一个</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -key rsakey.pem -out ecdhrsacsr.pem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用上面的 roor-ca CA证书签署证书请求，并添加用户证书扩展名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -<span class="keyword">in</span> ecdhrsacsr.pem -CAkey root-ca.key.pem -CA root-ca.cert.pem -force_pubkey ecdhpubkey.pem -out dev-ecdh-cert.pem -CAcreateserial</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">目前生成的证书列表如下：</span></span><br><span class="line"> dev-ecdh-cert.pem  # ECDH certificate(RSA算法的)</span><br><span class="line"> ecdhkey.pem         # ECDH private key</span><br><span class="line"> ecdhpubkey.pem       # ECDH public key</span><br><span class="line"> ecdhrsacsr.pem       # RSA 的 CSR文件</span><br><span class="line"> ecparam.pem         # EC Parameters</span><br><span class="line"> root-ca.cert.pem     # Root CA certificate</span><br><span class="line"> root-ca.cert.srl     </span><br><span class="line"> root-ca.key.pem      # Root CA private key(RSA算法的)</span><br><span class="line"> rsakey.pem           # RSA private key(用于请求证书的)</span><br></pre></td></tr></table></figure>


<h3 id="证书检查"><a href="#证书检查" class="headerlink" title="证书检查"></a>证书检查</h3><h4 id="根证书"><a href="#根证书" class="headerlink" title="根证书"></a>根证书</h4><ul>
<li><p>查看根证书 :</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -<span class="keyword">in</span> root-ca.cert.pem -noout -text</span></span><br></pre></td></tr></table></figure></li>
<li><p>证书内容</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number:</span><br><span class="line">            50:5c:0f:62:ef:d9:22:47:c9:ee:5c:08:11:50:40:74:41:24:88:d0</span><br><span class="line">        Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C = SG, ST = SG, L = SG, O = Sg 17xyx Tech.Ltd, OU = Ltd, CN = 17xyx.app, emailAddress = it@17xyx.app</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Jul 31 05:52:08 2020 GMT</span><br><span class="line">            Not After : Jul 29 05:52:08 2030 GMT</span><br><span class="line">        Subject: C = SG, ST = SG, L = SG, O = Sg 17xyx Tech.Ltd, OU = Ltd, CN = 17xyx.app, emailAddress = it@17xyx.app</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                RSA Public-Key: (4096 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:a6:3e:cd:08:ea:9e:ea:6f:22:e0:7a:7d:03:dd:</span><br><span class="line">                    ...</span><br><span class="line">                    a5:c2:90:54:11:0b:48:49:55:b2:51:ab:78:35:75:</span><br><span class="line">                    17:65:d3</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                CD:1D:8B:DE:1A:E3:3D:03:E5:3D:87:E0:28:9C:9C:30:77:4B:BD:05</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:CD:1D:8B:DE:1A:E3:3D:03:E5:3D:87:E0:28:9C:9C:30:77:4B:BD:05</span><br><span class="line"></span><br><span class="line">            X509v3 Basic Constraints: critical</span><br><span class="line">                CA:TRUE</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         8f:fa:4f:76:b8:98:6c:e1:18:d1:29:75:c0:51:ae:19:49:e1:</span><br><span class="line">         .....</span><br><span class="line">         6a:85:fa:67:f9:6a:f6:23:ff:80:59:b4:fd:fe:95:2c:4a:a3:</span><br><span class="line">         3e:89:24:0a:e0:44:17:84</span><br></pre></td></tr></table></figure></li>
<li><p>证书的 RFC2253 信息:</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -<span class="keyword">in</span> cacert.pem -noout -subject -nameopt RFC2253</span></span><br></pre></td></tr></table></figure>
<p>输出内容：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">subject=emailAddress=ordiymaster@hotmail.com,CN=ZiBoMonten,OU=section,O=ShenZhen ZiBoMonten Tech.Ltd,L=ShenZhen,ST=GuangDong,C=CN</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="查看签署的证书"><a href="#查看签署的证书" class="headerlink" title="查看签署的证书"></a>查看签署的证书</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">openssl x509 -in  dev-ecdh-cert.pem -noout --text</span><br></pre></td></tr></table></figure>
<p>证书内容：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 1 (0x0)</span><br><span class="line">        Serial Number:</span><br><span class="line">            70:59:08:36:95:fc:34:35:8b:55:11:db:27:2c:4c:46:6a:eb:c7:70</span><br><span class="line">        Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C = SG, ST = SG, L = SG, O = Sg 17xyx Tech.Ltd, OU = Ltd, CN = 17xyx.app, emailAddress = it@17xyx.app</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Jul 31 06:00:02 2020 GMT</span><br><span class="line">            Not After : Aug 30 06:00:02 2020 GMT</span><br><span class="line">        Subject: C = SG, ST = SG, L = SG, O = Singapoe Dev ltd, OU = Ltd, CN = dev-local.17xyx.app, emailAddress = it@17xyx.app</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: id-ecPublicKey</span><br><span class="line">                Public-Key: (256 bit)</span><br><span class="line">                pub:</span><br><span class="line">                    04:52:36:25:ca:e7:5c:84:f4:44:d5:b4:a8:58:21:</span><br><span class="line">                    ....</span><br><span class="line">                    c2:73:b0:2e:34:eb:01:b1:27:03:62:52:28:5a:0f:</span><br><span class="line">                    e2:9b:da:01:a8</span><br><span class="line">                ASN1 OID: prime256v1</span><br><span class="line">                NIST CURVE: P-256</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         8a:e0:43:dd:52:55:e9:c0:de:98:bf:04:ed:70:eb:39:6b:37:</span><br><span class="line">         .....</span><br><span class="line">         99:c5:47:5b:d4:d4:d3:60:2d:20:c5:6a:32:f9:0a:44:f4:05:</span><br><span class="line">         bc:60:00:f1:9b:a3:a8:9e</span><br></pre></td></tr></table></figure>

<h2 id="证书应用"><a href="#证书应用" class="headerlink" title="证书应用"></a>证书应用</h2><p>注意：生产环境使用的是中间证书，原理一样，这里直接使用Root-CA证书做示例:</p>
<h3 id="导入root-ca-导入到JVM信任库"><a href="#导入root-ca-导入到JVM信任库" class="headerlink" title="导入root-ca 导入到JVM信任库"></a>导入root-ca 导入到JVM信任库</h3><p>TLS协议证书验证时需要使用根证书对Server的证书进行验证，Java JKS(java KeyStore)会读取本地配置Root-CA证书。<br>-方法1 使用JVM System Properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -Djavax.net.ssl.trustStore&#x3D;samplecacerts \</span><br><span class="line">     -Djavax.net.ssl.trustStorePassword&#x3D;changeit Application</span><br></pre></td></tr></table></figure>
<p>使用<code>JVM System Properties</code>设置JKS比较灵活</p>
<ul>
<li>方法2 将Root-CA导入到JVM信任库：<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">macOS 为例</span></span><br><span class="line">keytool -importcert -alias startssl -keystore &quot;$JAVA_HOME/lib/security/cacerts&quot; -storepass changeit -file root-ca.der</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看root ca( 也可导入&lt;java-home&gt;/lib/security/jssecacerts,或使用启动参数导入)</span></span><br><span class="line">keytool -keystore &quot;$JAVA_HOME/lib/security/cacerts&quot; -storepass changeit -list | grep startssl</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="导入根证书到系统证书目录"><a href="#导入根证书到系统证书目录" class="headerlink" title="导入根证书到系统证书目录"></a>导入根证书到系统证书目录</h3><p>使用浏览器或者PostMan测试，程序无法读取到JKS中证书信息，所以需要将Root-CA导入到系统的证书目录下。<br>在开发阶段为方便调试，如果遇到证书验证失败，调试时可以直接将Root-CA导入到系统的证书目录下（生产上实际不要这个操作)：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">macos 操作命令：</span></span><br><span class="line">sudo sudo security add-trusted-cert -d -r trustRoot -k &quot;/Library/Keychains/System.keychain&quot; root-ca.cert.pem</span><br></pre></td></tr></table></figure>

<h3 id="Java应用程序使用-签署的CA证书"><a href="#Java应用程序使用-签署的CA证书" class="headerlink" title="Java应用程序使用 签署的CA证书"></a>Java应用程序使用 签署的CA证书</h3><p>JKS(java KeyStore)用于为SSL/TLS配置的组件之间的通信加密,JKS支持导入<code>.jks</code>格式的文件。需要将CA 证书进行格式转换：<br>Openssl PEM格式转换为JKS格式，转换过程：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Openssl PEM format --&gt; pkcs12 format  --&gt; jks format</span><br></pre></td></tr></table></figure>
<p>执行命令：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> opensll pem --&lt; pkcs12 （需要设置密码)</span></span><br><span class="line">openssl pkcs12 -export -in dev-ecdh-cert.pem -inkey ecdhkey.pem  -CAfile ../root_ca/root-ca.cert.pem -out dev-17xyx-app.ca.p12</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> pkcs12 --&gt; jks （需要输入 上一步设置的密码)</span></span><br><span class="line">keytool -importkeystore -srckeystore dev-17xyx-app.ca.p12 -srcstoretype pkcs12 -destkeystore dev-17xyx-app.ca.jks</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件目录</span></span><br><span class="line">dev-17xyx-app.ca.jks   # jks 文件</span><br><span class="line">dev-17xyx-app.ca.p12   </span><br><span class="line">dev-ecdh-cert.der</span><br><span class="line">dev-ecdh-cert.pem</span><br><span class="line">ecdhkey.pem</span><br><span class="line">ecdhpubkey.pem</span><br><span class="line">ecdhrsacsr.pem</span><br><span class="line">ecparam.pem</span><br><span class="line">rsakey.pem</span><br></pre></td></tr></table></figure>


<h4 id="程序实现示例"><a href="#程序实现示例" class="headerlink" title="程序实现示例"></a>程序实现示例</h4><p>以<code>netty</code>示例信息，如需获取源代码(<a href="https://github.com/ordiychen/demo-project/tree/master/test-http2-tls">https://github.com/ordiychen/demo-project/tree/master/test-http2-tls</a>)</p>
<ul>
<li>server http2<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//load root-ca</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;javax.net.ssl.trustStore&quot;</span>,<span class="string">&quot;./security-ca/root-ca/root-ca.jks&quot;</span>);</span><br><span class="line">    System.setProperty(<span class="string">&quot;javax.net.ssl.trustStorePassword&quot;</span>,<span class="string">&quot;hello@2020&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">9443</span>;</span><br><span class="line"></span><br><span class="line">KeyManagerFactory keyManagerFactory ;</span><br><span class="line">Http2Client http2Client ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Path path = Paths.get(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;current directory:&quot;</span>+ path.toAbsolutePath().toString());</span><br><span class="line">    String serverPrivateKey=<span class="string">&quot;server@2020&quot;</span>;</span><br><span class="line">    String serverCertificateFile=<span class="string">&quot;security-ca/server-ca/server-ca.jks&quot;</span>;</span><br><span class="line">    keyManagerFactory = jksLoad(serverPrivateKey,serverCertificateFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Http2Server().startServer(host,port,keyManagerFactory);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SSLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>   KeyManagerFactory <span class="title">jksLoad</span><span class="params">(String privatePassword, String jksFile)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(jksFile)) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] passphrase = privatePassword.toCharArray();</span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(<span class="string">&quot;SunX509&quot;</span>);</span><br><span class="line">        KeyStore ks = KeyStore.getInstance(<span class="string">&quot;JKS&quot;</span>);</span><br><span class="line">        ks.load(fileInputStream, passphrase);</span><br><span class="line">        kmf.init(ks, passphrase);</span><br><span class="line">        <span class="keyword">return</span> kmf;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | KeyStoreException | CertificateException | UnrecoverableKeyException | IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>client <code>SSLSocketFactory</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//load root-ca</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;javax.net.ssl.trustStore&quot;</span>,<span class="string">&quot;./security-ca/root-ca/root-ca.jks&quot;</span>);</span><br><span class="line">    System.setProperty(<span class="string">&quot;javax.net.ssl.trustStorePassword&quot;</span>,<span class="string">&quot;hello@2020&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">KeyManagerFactory keyManagerFactory =<span class="keyword">null</span>; <span class="comment">//读取 System properties 中的配置</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//load root-ca</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;javax.net.ssl.trustStore&quot;</span>,<span class="string">&quot;./security-ca/root-ca/root-ca.jks&quot;</span>);</span><br><span class="line">    System.setProperty(<span class="string">&quot;javax.net.ssl.trustStorePassword&quot;</span>,<span class="string">&quot;hello@2020&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">KeyManagerFactory keyManagerFactory =<span class="keyword">null</span>; <span class="comment">//读取 System properties 中的配置</span></span><br><span class="line">Http2Client http2Client ;</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    http2Client = <span class="keyword">new</span> Http2Client();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startHttp2Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String host =HelloWorldServerTest.host;</span><br><span class="line">    <span class="keyword">int</span> port = HelloWorldServerTest.port;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;/whatever&quot;</span>,<span class="string">&quot;/whatever&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;/url2&quot;</span>,<span class="string">&quot;test data&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        http2Client.startHttp2Server(host,port,keyManagerFactory,map);</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; start ...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SSLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>此部分的代码细节是一个实现的Demo,非项目本身代码(项目涉及甲方知识产权wuwu~)</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java8对TLSv1.3的支持有些问题，可能会遇到只支持TLSv1.2的情况，可以安装JDK11在尝试。采用Netty作为通信框架，是因为Netty是一个优秀的NIO通信框架，并且底层通信过程透明，方便理解整个通信过程。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.3">wiki Transport_Layer_Security#TLS_1.3</a><br><a href="https://wiki.openssl.org/index.php/TLS1.3">openssl tlsv1.3</a><br><a href="https://testssl.sh/openssl-iana.mapping.html">openssl-iana.mapping</a><br><a href="https://www.jianshu.com/p/5938432e2130">TLS 证书生成和使用</a><br><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.3">TLS1.3</a><br><a href="https://www.cnblogs.com/f-ck-need-u/p/6090885.html">openssl x509(签署和自签署)</a><br><a href="https://docs.oracle.com/javase/10/security/sample-truststores.htm#JSSEC-GUID-51A0A134-F222-4B69-ACCA-C5542AA7D9C8">sample-truststores</a>   </p>
]]></content>
      <categories>
        <category>tech</category>
        <category>TLS</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>TLS</tag>
      </tags>
  </entry>
</search>
